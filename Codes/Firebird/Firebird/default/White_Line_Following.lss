
White_Line_Following.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800200  00003a64  00003af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000034c  0080034a  0080034a  00003c42  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000545  00000000  00000000  00003c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010bc  00000000  00000000  000041a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020b  00000000  00000000  00005263  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001667  00000000  00000000  0000546e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00006ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050c  00000000  00000000  00006da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_5>
      18:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__vector_54>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e6       	ldi	r30, 0x64	; 100
      fc:	fa e3       	ldi	r31, 0x3A	; 58
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	16 e0       	ldi	r17, 0x06	; 6
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 39       	cpi	r26, 0x96	; 150
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 9d 14 	call	0x293a	; 0x293a <main>
     122:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	3e e4       	ldi	r19, 0x4E	; 78
     172:	43 e6       	ldi	r20, 0x63	; 99
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	8b e6       	ldi	r24, 0x6B	; 107
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	3e e4       	ldi	r19, 0x4E	; 78
     30a:	43 e6       	ldi	r20, 0x63	; 99
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	8b e6       	ldi	r24, 0x6B	; 107
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	3e e4       	ldi	r19, 0x4E	; 78
     47e:	43 e6       	ldi	r20, 0x63	; 99
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	8b e6       	ldi	r24, 0x6B	; 107
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	3e e4       	ldi	r19, 0x4E	; 78
     616:	43 e6       	ldi	r20, 0x63	; 99
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	8b e6       	ldi	r24, 0x6B	; 107
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	3e e4       	ldi	r19, 0x4E	; 78
     71c:	43 e6       	ldi	r20, 0x63	; 99
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	8b e6       	ldi	r24, 0x6B	; 107
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	3e e4       	ldi	r19, 0x4E	; 78
     832:	43 e6       	ldi	r20, 0x63	; 99
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	8b e6       	ldi	r24, 0x6B	; 107
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	3e e4       	ldi	r19, 0x4E	; 78
     924:	43 e6       	ldi	r20, 0x63	; 99
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	8b e6       	ldi	r24, 0x6B	; 107
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	3e e4       	ldi	r19, 0x4E	; 78
     a3a:	43 e6       	ldi	r20, 0x63	; 99
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	8b e6       	ldi	r24, 0x6B	; 107
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	3e e4       	ldi	r19, 0x4E	; 78
     b58:	43 e6       	ldi	r20, 0x63	; 99
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	8b e6       	ldi	r24, 0x6B	; 107
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	3e e4       	ldi	r19, 0x4E	; 78
     cd4:	43 e6       	ldi	r20, 0x63	; 99
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	8b e6       	ldi	r24, 0x6B	; 107
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	3e e4       	ldi	r19, 0x4E	; 78
     e1c:	43 e6       	ldi	r20, 0x63	; 99
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	8b e6       	ldi	r24, 0x6B	; 107
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	3e e4       	ldi	r19, 0x4E	; 78
     f88:	43 e6       	ldi	r20, 0x63	; 99
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	8b e6       	ldi	r24, 0x6B	; 107
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	3e e4       	ldi	r19, 0x4E	; 78
    10d0:	43 e6       	ldi	r20, 0x63	; 99
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	8b e6       	ldi	r24, 0x6B	; 107
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 b5 05 	sts	0x05B5, r25
    12ec:	80 93 b4 05 	sts	0x05B4, r24
		lcd_wr_char(million);
    12f0:	80 91 b4 05 	lds	r24, 0x05B4
    12f4:	90 91 b5 05 	lds	r25, 0x05B5
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 63 06 	sts	0x0663, r25
    1324:	80 93 62 06 	sts	0x0662, r24
		thousand = temp%10 + 48;
    1328:	80 91 62 06 	lds	r24, 0x0662
    132c:	90 91 63 06 	lds	r25, 0x0663
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 8d 06 	sts	0x068D, r25
    1340:	80 93 8c 06 	sts	0x068C, r24
		lcd_wr_char(thousand);
    1344:	80 91 8c 06 	lds	r24, 0x068C
    1348:	90 91 8d 06 	lds	r25, 0x068D
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 63 06 	sts	0x0663, r25
    1378:	80 93 62 06 	sts	0x0662, r24
		hundred = temp%10 + 48;
    137c:	80 91 62 06 	lds	r24, 0x0662
    1380:	90 91 63 06 	lds	r25, 0x0663
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 85 06 	sts	0x0685, r25
    1394:	80 93 84 06 	sts	0x0684, r24
		lcd_wr_char(hundred);
    1398:	80 91 84 06 	lds	r24, 0x0684
    139c:	90 91 85 06 	lds	r25, 0x0685
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 63 06 	sts	0x0663, r25
    13cc:	80 93 62 06 	sts	0x0662, r24
		tens = temp%10 + 48;
    13d0:	80 91 62 06 	lds	r24, 0x0662
    13d4:	90 91 63 06 	lds	r25, 0x0663
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 7a 06 	sts	0x067A, r25
    13e8:	80 93 79 06 	sts	0x0679, r24
		lcd_wr_char(tens);
    13ec:	80 91 79 06 	lds	r24, 0x0679
    13f0:	90 91 7a 06 	lds	r25, 0x067A
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 8b 06 	sts	0x068B, r25
    1420:	80 93 8a 06 	sts	0x068A, r24
		lcd_wr_char(unit);
    1424:	80 91 8a 06 	lds	r24, 0x068A
    1428:	90 91 8b 06 	lds	r25, 0x068B
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <read_sensors>:
#include <util/delay.h>
#include <math.h> 
#include "funcs.h"


void read_sensors(){	
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	Left_white_line = ADC_Conversion(LEFT_SENSOR);	
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ADC_Conversion>
    1460:	80 93 59 03 	sts	0x0359, r24
	Center_white_line = ADC_Conversion(CENTER_SENSOR);	
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ADC_Conversion>
    146a:	80 93 5a 03 	sts	0x035A, r24
	Right_white_line = ADC_Conversion(RIGHT_SENSOR);	
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ADC_Conversion>
    1474:	80 93 5b 03 	sts	0x035B, r24
	Left_IR_Sensor = ADC_Conversion(LEFT_IR_SENSOR);
    1478:	84 e0       	ldi	r24, 0x04	; 4
    147a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ADC_Conversion>
    147e:	80 93 5d 03 	sts	0x035D, r24
	Right_IR_Sensor = ADC_Conversion(RIGHT_IR_SENSOR);
    1482:	88 e0       	ldi	r24, 0x08	; 8
    1484:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ADC_Conversion>
    1488:	80 93 5e 03 	sts	0x035E, r24
	Front_IR_Sensor = ADC_Conversion(FRONT_IR_SENSOR);
    148c:	86 e0       	ldi	r24, 0x06	; 6
    148e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ADC_Conversion>
    1492:	80 93 5c 03 	sts	0x035C, r24
}
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <buzzer_on>:
/**
  Switches the buzzer on, to signal a block on the path.
  Changes status of the bot to BLOCKED, which is sent to the server (which in turn sends an SMS to inform the guards to take appropriate actions.)
*/
void buzzer_on (void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    14a6:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    14a8:	e6 e2       	ldi	r30, 0x26	; 38
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	88 60       	ori	r24, 0x08	; 8
    14b4:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    14b6:	e8 e2       	ldi	r30, 0x28	; 40
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	80 83       	st	Z, r24

}
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <buzzer_off>:

/**
  Switches the buzzer off.
*/
void buzzer_off (void)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	0f 92       	push	r0
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    14d0:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    14d2:	e6 e2       	ldi	r30, 0x26	; 38
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	87 7f       	andi	r24, 0xF7	; 247
    14de:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    14e0:	e8 e2       	ldi	r30, 0x28	; 40
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	80 83       	st	Z, r24
}
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <left_position_encoder_interrupt_init>:

/**
 * Left shaft encoder init.
 */
void left_position_encoder_interrupt_init(void)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
	cli();
    14f8:	f8 94       	cli
	SetBit(EICRB,_BV(ISC41)); //The falling edge between two samples of INTn generates an interrupt request.
    14fa:	aa e6       	ldi	r26, 0x6A	; 106
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ea e6       	ldi	r30, 0x6A	; 106
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	82 60       	ori	r24, 0x02	; 2
    1506:	8c 93       	st	X, r24
	SetBit(EIMSK,_BV(INT4)); //INT4 enable
    1508:	ad e3       	ldi	r26, 0x3D	; 61
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ed e3       	ldi	r30, 0x3D	; 61
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	80 61       	ori	r24, 0x10	; 16
    1514:	8c 93       	st	X, r24
	sei();
    1516:	78 94       	sei
}
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <right_position_encoder_interrupt_init>:

/**
 * Right shaft encoder init.
 */
void right_position_encoder_interrupt_init(void)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
	cli();
    1526:	f8 94       	cli
	SetBit(EICRB,_BV(ISC51)); //The falling edge between two samples of INTn generates an interrupt request.
    1528:	aa e6       	ldi	r26, 0x6A	; 106
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ea e6       	ldi	r30, 0x6A	; 106
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	88 60       	ori	r24, 0x08	; 8
    1534:	8c 93       	st	X, r24
	SetBit(EIMSK,_BV(INT5)); //INT5 enable
    1536:	ad e3       	ldi	r26, 0x3D	; 61
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ed e3       	ldi	r30, 0x3D	; 61
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 62       	ori	r24, 0x20	; 32
    1542:	8c 93       	st	X, r24
	sei();
    1544:	78 94       	sei
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <__vector_5>:

/**
 * Interrupt handler for left shaft count change.
 */
ISR(INT4_vect)
{
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	8f 93       	push	r24
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;
    1560:	80 91 63 03 	lds	r24, 0x0363
    1564:	8f 5f       	subi	r24, 0xFF	; 255
    1566:	80 93 63 03 	sts	0x0363, r24
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	8f 91       	pop	r24
    1570:	0f 90       	pop	r0
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	0f 90       	pop	r0
    1576:	1f 90       	pop	r1
    1578:	18 95       	reti

0000157a <__vector_6>:

/**
 * Interrupt handler for right shaft count change.
 */
ISR(INT5_vect)
{
    157a:	1f 92       	push	r1
    157c:	0f 92       	push	r0
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	0f 92       	push	r0
    1582:	11 24       	eor	r1, r1
    1584:	8f 93       	push	r24
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;
    158e:	80 91 64 03 	lds	r24, 0x0364
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	80 93 64 03 	sts	0x0364, r24
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	8f 91       	pop	r24
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <reset_shaft_counters>:

/**
 * Reset shaft counters.
 */
void reset_shaft_counters()
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft = 0;
    15b0:	10 92 63 03 	sts	0x0363, r1
	ShaftCountRight = 0;
    15b4:	10 92 64 03 	sts	0x0364, r1
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    15c6:	a7 e2       	ldi	r26, 0x27	; 39
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e2       	ldi	r30, 0x27	; 39
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	87 6f       	ori	r24, 0xF7	; 247
    15d2:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    15d4:	a8 e2       	ldi	r26, 0x28	; 40
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e8 e2       	ldi	r30, 0x28	; 40
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 78       	andi	r24, 0x80	; 128
    15e0:	8c 93       	st	X, r24
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    15f0:	e0 e3       	ldi	r30, 0x30	; 48
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	10 82       	st	Z, r1
 PORTF = 0x00;
    15f6:	e1 e3       	ldi	r30, 0x31	; 49
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	10 82       	st	Z, r1
 DDRK = 0x00;
    15fc:	e7 e0       	ldi	r30, 0x07	; 7
    15fe:	f1 e0       	ldi	r31, 0x01	; 1
    1600:	10 82       	st	Z, r1
 PORTK = 0x00;
    1602:	e8 e0       	ldi	r30, 0x08	; 8
    1604:	f1 e0       	ldi	r31, 0x01	; 1
    1606:	10 82       	st	Z, r1
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    1616:	a1 e2       	ldi	r26, 0x21	; 33
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e1 e2       	ldi	r30, 0x21	; 33
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 60       	ori	r24, 0x0F	; 15
    1622:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    1624:	a2 e2       	ldi	r26, 0x22	; 34
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e2 e2       	ldi	r30, 0x22	; 34
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	80 7f       	andi	r24, 0xF0	; 240
    1630:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1632:	aa e0       	ldi	r26, 0x0A	; 10
    1634:	b1 e0       	ldi	r27, 0x01	; 1
    1636:	ea e0       	ldi	r30, 0x0A	; 10
    1638:	f1 e0       	ldi	r31, 0x01	; 1
    163a:	80 81       	ld	r24, Z
    163c:	88 61       	ori	r24, 0x18	; 24
    163e:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1640:	ab e0       	ldi	r26, 0x0B	; 11
    1642:	b1 e0       	ldi	r27, 0x01	; 1
    1644:	eb e0       	ldi	r30, 0x0B	; 11
    1646:	f1 e0       	ldi	r31, 0x01	; 1
    1648:	80 81       	ld	r24, Z
    164a:	88 61       	ori	r24, 0x18	; 24
    164c:	8c 93       	st	X, r24
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    165c:	0e 94 df 0a 	call	0x15be	; 0x15be <lcd_port_config>
	adc_pin_config();
    1660:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <adc_pin_config>
	motion_pin_config();	
    1664:	0e 94 07 0b 	call	0x160e	; 0x160e <motion_pin_config>
}
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1676:	e1 e2       	ldi	r30, 0x21	; 33
    1678:	f1 e0       	ldi	r31, 0x01	; 1
    167a:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    167c:	e5 e2       	ldi	r30, 0x25	; 37
    167e:	f1 e0       	ldi	r31, 0x01	; 1
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1684:	e4 e2       	ldi	r30, 0x24	; 36
    1686:	f1 e0       	ldi	r31, 0x01	; 1
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    168c:	e9 e2       	ldi	r30, 0x29	; 41
    168e:	f1 e0       	ldi	r31, 0x01	; 1
    1690:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1692:	e8 e2       	ldi	r30, 0x28	; 40
    1694:	f1 e0       	ldi	r31, 0x01	; 1
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    169a:	eb e2       	ldi	r30, 0x2B	; 43
    169c:	f1 e0       	ldi	r31, 0x01	; 1
    169e:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    16a0:	ea e2       	ldi	r30, 0x2A	; 42
    16a2:	f1 e0       	ldi	r31, 0x01	; 1
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    16a8:	ed e2       	ldi	r30, 0x2D	; 45
    16aa:	f1 e0       	ldi	r31, 0x01	; 1
    16ac:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    16ae:	ec e2       	ldi	r30, 0x2C	; 44
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    16b6:	e0 e2       	ldi	r30, 0x20	; 32
    16b8:	f1 e0       	ldi	r31, 0x01	; 1
    16ba:	89 ea       	ldi	r24, 0xA9	; 169
    16bc:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    16be:	e1 e2       	ldi	r30, 0x21	; 33
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	8b e0       	ldi	r24, 0x0B	; 11
    16c4:	80 83       	st	Z, r24
}
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <adc_init>:

void adc_init()
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    16d4:	ea e7       	ldi	r30, 0x7A	; 122
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    16da:	eb e7       	ldi	r30, 0x7B	; 123
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    16e0:	ec e7       	ldi	r30, 0x7C	; 124
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 e2       	ldi	r24, 0x20	; 32
    16e6:	80 83       	st	Z, r24
	ACSR = 0x80;
    16e8:	e0 e5       	ldi	r30, 0x50	; 80
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 e8       	ldi	r24, 0x80	; 128
    16ee:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    16f0:	ea e7       	ldi	r30, 0x7A	; 122
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	86 e8       	ldi	r24, 0x86	; 134
    16f6:	80 83       	st	Z, r24
}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	0f 92       	push	r0
    1704:	0f 92       	push	r0
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	88 30       	cpi	r24, 0x08	; 8
    1710:	20 f0       	brcs	.+8      	; 0x171a <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1712:	eb e7       	ldi	r30, 0x7B	; 123
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	88 e0       	ldi	r24, 0x08	; 8
    1718:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	87 70       	andi	r24, 0x07	; 7
    171e:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    1720:	ec e7       	ldi	r30, 0x7C	; 124
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	80 62       	ori	r24, 0x20	; 32
    1728:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    172a:	aa e7       	ldi	r26, 0x7A	; 122
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ea e7       	ldi	r30, 0x7A	; 122
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	80 64       	ori	r24, 0x40	; 64
    1736:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1738:	ea e7       	ldi	r30, 0x7A	; 122
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	80 71       	andi	r24, 0x10	; 16
    1744:	90 70       	andi	r25, 0x00	; 0
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	b9 f3       	breq	.-18     	; 0x1738 <ADC_Conversion+0x3a>
	a=ADCH;
    174a:	e9 e7       	ldi	r30, 0x79	; 121
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1752:	aa e7       	ldi	r26, 0x7A	; 122
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ea e7       	ldi	r30, 0x7A	; 122
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 61       	ori	r24, 0x10	; 16
    175e:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1760:	eb e7       	ldi	r30, 0x7B	; 123
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	10 82       	st	Z, r1
	return a;
    1766:	89 81       	ldd	r24, Y+1	; 0x01
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <print_sensor+0x6>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	6a 83       	std	Y+2, r22	; 0x02
    1780:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <ADC_Conversion>
    1788:	80 93 64 06 	sts	0x0664, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    178c:	80 91 64 06 	lds	r24, 0x0664
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	6a 81       	ldd	r22, Y+2	; 0x02
    1798:	a9 01       	movw	r20, r18
    179a:	23 e0       	ldi	r18, 0x03	; 3
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <print_sensor_data>:

void print_sensor_data()
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	43 e0       	ldi	r20, 0x03	; 3
    17bc:	0e 94 b9 0b 	call	0x1772	; 0x1772 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	65 e0       	ldi	r22, 0x05	; 5
    17c4:	42 e0       	ldi	r20, 0x02	; 2
    17c6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	69 e0       	ldi	r22, 0x09	; 9
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 b9 0b 	call	0x1772	; 0x1772 <print_sensor>
		/*
		print_sensor(2,1,LEFT_IR_SENSOR);	//Prints value of left  ir sensor
		print_sensor(2,5,RIGHT_IR_SENSOR);	//Prints Value of right ir sensor
		print_sensor(2,9,FRONT_IR_SENSOR);	//Prints Value of front ir sensor
		*/
}
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <velocity>:


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	0f 92       	push	r0
    17e0:	0f 92       	push	r0
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    17ea:	e8 e2       	ldi	r30, 0x28	; 40
    17ec:	f1 e0       	ldi	r31, 0x01	; 1
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    17f2:	ea e2       	ldi	r30, 0x2A	; 42
    17f4:	f1 e0       	ldi	r31, 0x01	; 1
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	80 83       	st	Z, r24
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <mod_velocity>:

//scale the velocity
void mod_velocity(int l,int r){
    1804:	1f 93       	push	r17
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	2c 97       	sbiw	r28, 0x0c	; 12
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	9a 87       	std	Y+10, r25	; 0x0a
    181c:	89 87       	std	Y+9, r24	; 0x09
    181e:	7c 87       	std	Y+12, r23	; 0x0c
    1820:	6b 87       	std	Y+11, r22	; 0x0b
	float lv = l*(1.4);
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	aa 27       	eor	r26, r26
    1828:	97 fd       	sbrc	r25, 7
    182a:	a0 95       	com	r26
    182c:	ba 2f       	mov	r27, r26
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 18 19 	call	0x3230	; 0x3230 <__floatsisf>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	23 e3       	ldi	r18, 0x33	; 51
    1840:	33 e3       	ldi	r19, 0x33	; 51
    1842:	43 eb       	ldi	r20, 0xB3	; 179
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	9e 83       	std	Y+6, r25	; 0x06
    1852:	af 83       	std	Y+7, r26	; 0x07
    1854:	b8 87       	std	Y+8, r27	; 0x08
	float rv = r*(1.4);
    1856:	8b 85       	ldd	r24, Y+11	; 0x0b
    1858:	9c 85       	ldd	r25, Y+12	; 0x0c
    185a:	aa 27       	eor	r26, r26
    185c:	97 fd       	sbrc	r25, 7
    185e:	a0 95       	com	r26
    1860:	ba 2f       	mov	r27, r26
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 18 19 	call	0x3230	; 0x3230 <__floatsisf>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	23 e3       	ldi	r18, 0x33	; 51
    1874:	33 e3       	ldi	r19, 0x33	; 51
    1876:	43 eb       	ldi	r20, 0xB3	; 179
    1878:	5f e3       	ldi	r21, 0x3F	; 63
    187a:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	ab 83       	std	Y+3, r26	; 0x03
    1888:	bc 83       	std	Y+4, r27	; 0x04
	velocity((int)lv,(int)rv);
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fixsfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	18 2f       	mov	r17, r24
    189c:	69 81       	ldd	r22, Y+1	; 0x01
    189e:	7a 81       	ldd	r23, Y+2	; 0x02
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fixsfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	98 2f       	mov	r25, r24
    18ae:	81 2f       	mov	r24, r17
    18b0:	69 2f       	mov	r22, r25
    18b2:	0e 94 ed 0b 	call	0x17da	; 0x17da <velocity>
}
    18b6:	2c 96       	adiw	r28, 0x0c	; 12
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	1f 91       	pop	r17
    18c8:	08 95       	ret

000018ca <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	0f 92       	push	r0
    18d0:	0f 92       	push	r0
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    18d8:	19 82       	std	Y+1, r1	; 0x01
 Direction &= 0x0F; 		// removing upper nibbel for the protection
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	8f 70       	andi	r24, 0x0F	; 15
    18de:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    18e0:	e2 e2       	ldi	r30, 0x22	; 34
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	80 7f       	andi	r24, 0xF0	; 240
    18ec:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    18ee:	99 81       	ldd	r25, Y+1	; 0x01
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	89 2b       	or	r24, r25
    18f4:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    18f6:	e2 e2       	ldi	r30, 0x22	; 34
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	80 83       	st	Z, r24
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <forward>:

void forward (void) 
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x06);
    1910:	86 e0       	ldi	r24, 0x06	; 6
    1912:	0e 94 65 0c 	call	0x18ca	; 0x18ca <motion_set>
}
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <stop>:

void stop (void)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	0e 94 65 0c 	call	0x18ca	; 0x18ca <motion_set>
}
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <init_devices>:

void init_devices (void)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    1938:	f8 94       	cli
	port_init();
    193a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <port_init>
	adc_init();
    193e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <adc_init>
	timer5_init();
    1942:	0e 94 37 0b 	call	0x166e	; 0x166e <timer5_init>
	sei();   //Enables the global interrupts
    1946:	78 94       	sei
}
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <turn_right>:
/**
  Turn right at an intersection.
**/


void turn_right(){
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	2e 97       	sbiw	r28, 0x0e	; 14
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
	buzzer_off();
    1962:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <buzzer_off>
	motion_set(0x0A);
    1966:	8a e0       	ldi	r24, 0x0A	; 10
    1968:	0e 94 65 0c 	call	0x18ca	; 0x18ca <motion_set>
	mod_velocity(70,70);
    196c:	86 e4       	ldi	r24, 0x46	; 70
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	66 e4       	ldi	r22, 0x46	; 70
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	aa e7       	ldi	r26, 0x7A	; 122
    197e:	b4 e4       	ldi	r27, 0x44	; 68
    1980:	8b 87       	std	Y+11, r24	; 0x0b
    1982:	9c 87       	std	Y+12, r25	; 0x0c
    1984:	ad 87       	std	Y+13, r26	; 0x0d
    1986:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	6b 85       	ldd	r22, Y+11	; 0x0b
    198a:	7c 85       	ldd	r23, Y+12	; 0x0c
    198c:	8d 85       	ldd	r24, Y+13	; 0x0d
    198e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1990:	26 e6       	ldi	r18, 0x66	; 102
    1992:	3e e4       	ldi	r19, 0x4E	; 78
    1994:	43 e6       	ldi	r20, 0x63	; 99
    1996:	55 e4       	ldi	r21, 0x45	; 69
    1998:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8f 83       	std	Y+7, r24	; 0x07
    19a2:	98 87       	std	Y+8, r25	; 0x08
    19a4:	a9 87       	std	Y+9, r26	; 0x09
    19a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <turn_right+0x7c>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <turn_right+0xfa>
	else if (__tmp > 65535)
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <turn_right+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <turn_right+0xdc>
    1a0c:	8b e6       	ldi	r24, 0x6B	; 107
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	9c 83       	std	Y+4, r25	; 0x04
    1a12:	8b 83       	std	Y+3, r24	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <turn_right+0xca>
    1a1c:	9c 83       	std	Y+4, r25	; 0x04
    1a1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <turn_right+0xbe>
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <turn_right+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6f 81       	ldd	r22, Y+7	; 0x07
    1a36:	78 85       	ldd	r23, Y+8	; 0x08
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <turn_right+0x106>
    1a58:	9a 83       	std	Y+2, r25	; 0x02
    1a5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	while(1){
		print_sensor_data();
    1a5c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <print_sensor_data>
		read_sensors();
    1a60:	0e 94 29 0a 	call	0x1452	; 0x1452 <read_sensors>
		if(Center_white_line < W_THRESHOLD) break;
    1a64:	80 91 5a 03 	lds	r24, 0x035A
    1a68:	8f 31       	cpi	r24, 0x1F	; 31
    1a6a:	c0 f7       	brcc	.-16     	; 0x1a5c <turn_right+0x10e>
	}
	mod_velocity(0,0);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
}
    1a78:	2e 96       	adiw	r28, 0x0e	; 14
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <turn_left>:

/**
  Turn left at an intersection.
**/
void turn_left(){
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	2e 97       	sbiw	r28, 0x0e	; 14
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
	buzzer_off();
    1a9e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <buzzer_off>
	motion_set(0x05);
    1aa2:	85 e0       	ldi	r24, 0x05	; 5
    1aa4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <motion_set>
	
	mod_velocity(70,70);
    1aa8:	86 e4       	ldi	r24, 0x46	; 70
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	66 e4       	ldi	r22, 0x46	; 70
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	aa e7       	ldi	r26, 0x7A	; 122
    1aba:	b4 e4       	ldi	r27, 0x44	; 68
    1abc:	8b 87       	std	Y+11, r24	; 0x0b
    1abe:	9c 87       	std	Y+12, r25	; 0x0c
    1ac0:	ad 87       	std	Y+13, r26	; 0x0d
    1ac2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1acc:	26 e6       	ldi	r18, 0x66	; 102
    1ace:	3e e4       	ldi	r19, 0x4E	; 78
    1ad0:	43 e6       	ldi	r20, 0x63	; 99
    1ad2:	55 e4       	ldi	r21, 0x45	; 69
    1ad4:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	8f 83       	std	Y+7, r24	; 0x07
    1ade:	98 87       	std	Y+8, r25	; 0x08
    1ae0:	a9 87       	std	Y+9, r26	; 0x09
    1ae2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae6:	78 85       	ldd	r23, Y+8	; 0x08
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e8       	ldi	r20, 0x80	; 128
    1af2:	5f e3       	ldi	r21, 0x3F	; 63
    1af4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
    1af8:	88 23       	and	r24, r24
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <turn_left+0x7c>
		__ticks = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	3f c0       	rjmp	.+126    	; 0x1b84 <turn_left+0xfa>
	else if (__tmp > 65535)
    1b06:	6f 81       	ldd	r22, Y+7	; 0x07
    1b08:	78 85       	ldd	r23, Y+8	; 0x08
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	3f ef       	ldi	r19, 0xFF	; 255
    1b12:	4f e7       	ldi	r20, 0x7F	; 127
    1b14:	57 e4       	ldi	r21, 0x47	; 71
    1b16:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	4c f5       	brge	.+82     	; 0x1b70 <turn_left+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	51 e4       	ldi	r21, 0x41	; 65
    1b2e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	0f c0       	rjmp	.+30     	; 0x1b66 <turn_left+0xdc>
    1b48:	8b e6       	ldi	r24, 0x6B	; 107
    1b4a:	91 e0       	ldi	r25, 0x01	; 1
    1b4c:	9c 83       	std	Y+4, r25	; 0x04
    1b4e:	8b 83       	std	Y+3, r24	; 0x03
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <turn_left+0xca>
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	69 f7       	brne	.-38     	; 0x1b48 <turn_left+0xbe>
    1b6e:	14 c0       	rjmp	.+40     	; 0x1b98 <turn_left+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b70:	6f 81       	ldd	r22, Y+7	; 0x07
    1b72:	78 85       	ldd	r23, Y+8	; 0x08
    1b74:	89 85       	ldd	r24, Y+9	; 0x09
    1b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b78:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <turn_left+0x106>
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	while(1){
		print_sensor_data();
    1b98:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <print_sensor_data>
		read_sensors();
    1b9c:	0e 94 29 0a 	call	0x1452	; 0x1452 <read_sensors>
		if(Center_white_line < W_THRESHOLD) break;
    1ba0:	80 91 5a 03 	lds	r24, 0x035A
    1ba4:	8f 31       	cpi	r24, 0x1F	; 31
    1ba6:	c0 f7       	brcc	.-16     	; 0x1b98 <turn_left+0x10e>
	}
	mod_velocity(0,0);
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
}
    1bb4:	2e 96       	adiw	r28, 0x0e	; 14
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <go_upto_next_cross>:
			(0,1,1)			- Turn left (slightly)
			(0,0,1)			- Turn left (hard)
			(1,1,1)			- Reached the intersection
			(0,0,0)			- Recovery mode. Move in the direction of the last sensor that was on white line
*/
void go_upto_next_cross(){
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	27 97       	sbiw	r28, 0x07	; 7
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
	char last_on = LEFT_SENSOR;
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	8e 83       	std	Y+6, r24	; 0x06
	char black_flag = 0;
    1bde:	1d 82       	std	Y+5, r1	; 0x05
	back=0;
    1be0:	10 92 91 04 	sts	0x0491, r1
	while(1)
	{
		PORTJ = PORTJ+1;
    1be4:	a5 e0       	ldi	r26, 0x05	; 5
    1be6:	b1 e0       	ldi	r27, 0x01	; 1
    1be8:	e5 e0       	ldi	r30, 0x05	; 5
    1bea:	f1 e0       	ldi	r31, 0x01	; 1
    1bec:	80 81       	ld	r24, Z
    1bee:	8f 5f       	subi	r24, 0xFF	; 255
    1bf0:	8c 93       	st	X, r24
		if(Center_white_line<W_THRESHOLD_STOP && Left_white_line<W_THRESHOLD_STOP && Right_white_line<W_THRESHOLD_STOP ){
    1bf2:	80 91 5a 03 	lds	r24, 0x035A
    1bf6:	88 30       	cpi	r24, 0x08	; 8
    1bf8:	68 f4       	brcc	.+26     	; 0x1c14 <go_upto_next_cross+0x4e>
    1bfa:	80 91 59 03 	lds	r24, 0x0359
    1bfe:	88 30       	cpi	r24, 0x08	; 8
    1c00:	48 f4       	brcc	.+18     	; 0x1c14 <go_upto_next_cross+0x4e>
    1c02:	80 91 5b 03 	lds	r24, 0x035B
    1c06:	88 30       	cpi	r24, 0x08	; 8
    1c08:	28 f4       	brcc	.+10     	; 0x1c14 <go_upto_next_cross+0x4e>
			PORTJ = 0xAA;
    1c0a:	e5 e0       	ldi	r30, 0x05	; 5
    1c0c:	f1 e0       	ldi	r31, 0x01	; 1
    1c0e:	8a ea       	ldi	r24, 0xAA	; 170
    1c10:	80 83       	st	Z, r24
    1c12:	15 c1       	rjmp	.+554    	; 0x1e3e <go_upto_next_cross+0x278>
		 	break;
		}

		read_sensors();
    1c14:	0e 94 29 0a 	call	0x1452	; 0x1452 <read_sensors>
		flag=0;
    1c18:	10 92 58 03 	sts	0x0358, r1
		print_sensor_data();
    1c1c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <print_sensor_data>
		
		if(!back && Front_IR_Sensor<0xF0)
    1c20:	80 91 91 04 	lds	r24, 0x0491
    1c24:	88 23       	and	r24, r24
    1c26:	79 f4       	brne	.+30     	; 0x1c46 <go_upto_next_cross+0x80>
    1c28:	80 91 5c 03 	lds	r24, 0x035C
    1c2c:	80 3f       	cpi	r24, 0xF0	; 240
    1c2e:	58 f4       	brcc	.+22     	; 0x1c46 <go_upto_next_cross+0x80>
		{
			//stop();
			buzzer_on();
    1c30:	0e 94 4e 0a 	call	0x149c	; 0x149c <buzzer_on>
			motion_set(0X09);
    1c34:	89 e0       	ldi	r24, 0x09	; 9
    1c36:	0e 94 65 0c 	call	0x18ca	; 0x18ca <motion_set>
			read_sensors();
    1c3a:	0e 94 29 0a 	call	0x1452	; 0x1452 <read_sensors>
			
			back=1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	80 93 91 04 	sts	0x0491, r24
    1c44:	fc c0       	rjmp	.+504    	; 0x1e3e <go_upto_next_cross+0x278>
			break;
			
		}
		//Sensor config : 010
		else if(Left_white_line > W_THRESHOLD && Center_white_line < W_THRESHOLD && Right_white_line > W_THRESHOLD)
    1c46:	80 91 59 03 	lds	r24, 0x0359
    1c4a:	80 32       	cpi	r24, 0x20	; 32
    1c4c:	e0 f0       	brcs	.+56     	; 0x1c86 <go_upto_next_cross+0xc0>
    1c4e:	80 91 5a 03 	lds	r24, 0x035A
    1c52:	8f 31       	cpi	r24, 0x1F	; 31
    1c54:	c0 f4       	brcc	.+48     	; 0x1c86 <go_upto_next_cross+0xc0>
    1c56:	80 91 5b 03 	lds	r24, 0x035B
    1c5a:	80 32       	cpi	r24, 0x20	; 32
    1c5c:	a0 f0       	brcs	.+40     	; 0x1c86 <go_upto_next_cross+0xc0>
		{
			if(!back)forward();
    1c5e:	80 91 91 04 	lds	r24, 0x0491
    1c62:	88 23       	and	r24, r24
    1c64:	19 f4       	brne	.+6      	; 0x1c6c <go_upto_next_cross+0xa6>
    1c66:	0e 94 84 0c 	call	0x1908	; 0x1908 <forward>
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <go_upto_next_cross+0xac>
			else motion_set(0X09);
    1c6c:	89 e0       	ldi	r24, 0x09	; 9
    1c6e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <motion_set>
			mod_velocity(60,60);
    1c72:	8c e3       	ldi	r24, 0x3C	; 60
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	6c e3       	ldi	r22, 0x3C	; 60
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
			black_flag = 0;
    1c7e:	1d 82       	std	Y+5, r1	; 0x05
			buzzer_off();
    1c80:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <buzzer_off>
    1c84:	af cf       	rjmp	.-162    	; 0x1be4 <go_upto_next_cross+0x1e>
		}

		//Sensor config : 110
		else if(Left_white_line < W_THRESHOLD && Center_white_line < W_THRESHOLD && Right_white_line > W_THRESHOLD)
    1c86:	80 91 59 03 	lds	r24, 0x0359
    1c8a:	8f 31       	cpi	r24, 0x1F	; 31
    1c8c:	10 f5       	brcc	.+68     	; 0x1cd2 <go_upto_next_cross+0x10c>
    1c8e:	80 91 5a 03 	lds	r24, 0x035A
    1c92:	8f 31       	cpi	r24, 0x1F	; 31
    1c94:	f0 f4       	brcc	.+60     	; 0x1cd2 <go_upto_next_cross+0x10c>
    1c96:	80 91 5b 03 	lds	r24, 0x035B
    1c9a:	80 32       	cpi	r24, 0x20	; 32
    1c9c:	d0 f0       	brcs	.+52     	; 0x1cd2 <go_upto_next_cross+0x10c>
		{
			if(!back){
    1c9e:	80 91 91 04 	lds	r24, 0x0491
    1ca2:	88 23       	and	r24, r24
    1ca4:	49 f4       	brne	.+18     	; 0x1cb8 <go_upto_next_cross+0xf2>
				forward();
    1ca6:	0e 94 84 0c 	call	0x1908	; 0x1908 <forward>
				mod_velocity(50,75);
    1caa:	82 e3       	ldi	r24, 0x32	; 50
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	6b e4       	ldi	r22, 0x4B	; 75
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
    1cb6:	09 c0       	rjmp	.+18     	; 0x1cca <go_upto_next_cross+0x104>
			}
			else{
			 	motion_set(0X09);
    1cb8:	89 e0       	ldi	r24, 0x09	; 9
    1cba:	0e 94 65 0c 	call	0x18ca	; 0x18ca <motion_set>
				mod_velocity(75,50);
    1cbe:	8b e4       	ldi	r24, 0x4B	; 75
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	62 e3       	ldi	r22, 0x32	; 50
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
			}
			
			black_flag = 0;
    1cca:	1d 82       	std	Y+5, r1	; 0x05
			buzzer_off();
    1ccc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <buzzer_off>
    1cd0:	89 cf       	rjmp	.-238    	; 0x1be4 <go_upto_next_cross+0x1e>
		}
		
		//Sensor config : 100
		else if(Left_white_line < W_THRESHOLD && Center_white_line > W_THRESHOLD && Right_white_line > W_THRESHOLD)
    1cd2:	80 91 59 03 	lds	r24, 0x0359
    1cd6:	8f 31       	cpi	r24, 0x1F	; 31
    1cd8:	38 f5       	brcc	.+78     	; 0x1d28 <go_upto_next_cross+0x162>
    1cda:	80 91 5a 03 	lds	r24, 0x035A
    1cde:	80 32       	cpi	r24, 0x20	; 32
    1ce0:	18 f1       	brcs	.+70     	; 0x1d28 <go_upto_next_cross+0x162>
    1ce2:	80 91 5b 03 	lds	r24, 0x035B
    1ce6:	80 32       	cpi	r24, 0x20	; 32
    1ce8:	f8 f0       	brcs	.+62     	; 0x1d28 <go_upto_next_cross+0x162>
		{

			if(!back){
    1cea:	80 91 91 04 	lds	r24, 0x0491
    1cee:	88 23       	and	r24, r24
    1cf0:	59 f4       	brne	.+22     	; 0x1d08 <go_upto_next_cross+0x142>
				PORTA = 0x05;
    1cf2:	e2 e2       	ldi	r30, 0x22	; 34
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	85 e0       	ldi	r24, 0x05	; 5
    1cf8:	80 83       	st	Z, r24
				mod_velocity(50,80);
    1cfa:	82 e3       	ldi	r24, 0x32	; 50
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	60 e5       	ldi	r22, 0x50	; 80
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
    1d06:	0a c0       	rjmp	.+20     	; 0x1d1c <go_upto_next_cross+0x156>
			}
			else{				
			 	PORTA=0x06;
    1d08:	e2 e2       	ldi	r30, 0x22	; 34
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	86 e0       	ldi	r24, 0x06	; 6
    1d0e:	80 83       	st	Z, r24
				mod_velocity(50,80);
    1d10:	82 e3       	ldi	r24, 0x32	; 50
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	60 e5       	ldi	r22, 0x50	; 80
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
			}
			
			
			last_on = LEFT_SENSOR;
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	8e 83       	std	Y+6, r24	; 0x06
			black_flag = 0;
    1d20:	1d 82       	std	Y+5, r1	; 0x05
			buzzer_off();
    1d22:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <buzzer_off>
    1d26:	5e cf       	rjmp	.-324    	; 0x1be4 <go_upto_next_cross+0x1e>
		}

		//Sensor config : 011
		else if(Left_white_line > W_THRESHOLD && Center_white_line < W_THRESHOLD && Right_white_line < W_THRESHOLD)
    1d28:	80 91 59 03 	lds	r24, 0x0359
    1d2c:	80 32       	cpi	r24, 0x20	; 32
    1d2e:	18 f1       	brcs	.+70     	; 0x1d76 <go_upto_next_cross+0x1b0>
    1d30:	80 91 5a 03 	lds	r24, 0x035A
    1d34:	8f 31       	cpi	r24, 0x1F	; 31
    1d36:	f8 f4       	brcc	.+62     	; 0x1d76 <go_upto_next_cross+0x1b0>
    1d38:	80 91 5b 03 	lds	r24, 0x035B
    1d3c:	8f 31       	cpi	r24, 0x1F	; 31
    1d3e:	d8 f4       	brcc	.+54     	; 0x1d76 <go_upto_next_cross+0x1b0>
		{

			if(!back){
    1d40:	80 91 91 04 	lds	r24, 0x0491
    1d44:	88 23       	and	r24, r24
    1d46:	49 f4       	brne	.+18     	; 0x1d5a <go_upto_next_cross+0x194>

				forward();
    1d48:	0e 94 84 0c 	call	0x1908	; 0x1908 <forward>
				mod_velocity(75,50);
    1d4c:	8b e4       	ldi	r24, 0x4B	; 75
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	62 e3       	ldi	r22, 0x32	; 50
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
    1d58:	0a c0       	rjmp	.+20     	; 0x1d6e <go_upto_next_cross+0x1a8>
			}
			else{
			 	PORTA=0x09;
    1d5a:	e2 e2       	ldi	r30, 0x22	; 34
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	89 e0       	ldi	r24, 0x09	; 9
    1d60:	80 83       	st	Z, r24

				mod_velocity(50,75);
    1d62:	82 e3       	ldi	r24, 0x32	; 50
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	6b e4       	ldi	r22, 0x4B	; 75
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
			}
			
			black_flag = 0;
    1d6e:	1d 82       	std	Y+5, r1	; 0x05
			buzzer_off();
    1d70:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <buzzer_off>
    1d74:	37 cf       	rjmp	.-402    	; 0x1be4 <go_upto_next_cross+0x1e>
		}

		//Sensor config : 001
		else if(Left_white_line > W_THRESHOLD && Center_white_line > W_THRESHOLD && Right_white_line < W_THRESHOLD)
    1d76:	80 91 59 03 	lds	r24, 0x0359
    1d7a:	80 32       	cpi	r24, 0x20	; 32
    1d7c:	38 f1       	brcs	.+78     	; 0x1dcc <go_upto_next_cross+0x206>
    1d7e:	80 91 5a 03 	lds	r24, 0x035A
    1d82:	80 32       	cpi	r24, 0x20	; 32
    1d84:	18 f1       	brcs	.+70     	; 0x1dcc <go_upto_next_cross+0x206>
    1d86:	80 91 5b 03 	lds	r24, 0x035B
    1d8a:	8f 31       	cpi	r24, 0x1F	; 31
    1d8c:	f8 f4       	brcc	.+62     	; 0x1dcc <go_upto_next_cross+0x206>
		{

			if(!back){
    1d8e:	80 91 91 04 	lds	r24, 0x0491
    1d92:	88 23       	and	r24, r24
    1d94:	59 f4       	brne	.+22     	; 0x1dac <go_upto_next_cross+0x1e6>
				PORTA = 0x0A;
    1d96:	e2 e2       	ldi	r30, 0x22	; 34
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	8a e0       	ldi	r24, 0x0A	; 10
    1d9c:	80 83       	st	Z, r24
				mod_velocity(80,50);
    1d9e:	80 e5       	ldi	r24, 0x50	; 80
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	62 e3       	ldi	r22, 0x32	; 50
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
    1daa:	0a c0       	rjmp	.+20     	; 0x1dc0 <go_upto_next_cross+0x1fa>
			}
			else{
			 	PORTA=0x06;
    1dac:	e2 e2       	ldi	r30, 0x22	; 34
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	86 e0       	ldi	r24, 0x06	; 6
    1db2:	80 83       	st	Z, r24
				mod_velocity(80,50);
    1db4:	80 e5       	ldi	r24, 0x50	; 80
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	62 e3       	ldi	r22, 0x32	; 50
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
			}

			last_on = RIGHT_SENSOR;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	8e 83       	std	Y+6, r24	; 0x06
			black_flag = 0;
    1dc4:	1d 82       	std	Y+5, r1	; 0x05
			buzzer_off();
    1dc6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <buzzer_off>
    1dca:	0c cf       	rjmp	.-488    	; 0x1be4 <go_upto_next_cross+0x1e>
		}
		//Sensor config : 000
		else
		{
			buzzer_off();
    1dcc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <buzzer_off>
			if(black_flag >= CONT_BLACK)  {
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	85 30       	cpi	r24, 0x05	; 5
    1dd4:	d8 f0       	brcs	.+54     	; 0x1e0c <go_upto_next_cross+0x246>
				if(last_on == LEFT_SENSOR)
    1dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	21 f4       	brne	.+8      	; 0x1de4 <go_upto_next_cross+0x21e>
					motion_set(0x05);
    1ddc:	85 e0       	ldi	r24, 0x05	; 5
    1dde:	0e 94 65 0c 	call	0x18ca	; 0x18ca <motion_set>
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <go_upto_next_cross+0x22a>
				else if(last_on == RIGHT_SENSOR)
    1de4:	8e 81       	ldd	r24, Y+6	; 0x06
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	19 f4       	brne	.+6      	; 0x1df0 <go_upto_next_cross+0x22a>
					motion_set(0x0A);
    1dea:	8a e0       	ldi	r24, 0x0A	; 10
    1dec:	0e 94 65 0c 	call	0x18ca	; 0x18ca <motion_set>
				mod_velocity(60,60);
    1df0:	8c e3       	ldi	r24, 0x3C	; 60
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	6c e3       	ldi	r22, 0x3C	; 60
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
				while(1){
					print_sensor_data();
    1dfc:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <print_sensor_data>
					read_sensors();
    1e00:	0e 94 29 0a 	call	0x1452	; 0x1452 <read_sensors>
					if(Center_white_line < W_THRESHOLD) break;
    1e04:	80 91 5a 03 	lds	r24, 0x035A
    1e08:	8f 31       	cpi	r24, 0x1F	; 31
    1e0a:	c0 f7       	brcc	.-16     	; 0x1dfc <go_upto_next_cross+0x236>
				}
			}
			black_flag = (black_flag < CONT_BLACK)?black_flag+1:CONT_BLACK;
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	85 30       	cpi	r24, 0x05	; 5
    1e10:	28 f4       	brcc	.+10     	; 0x1e1c <go_upto_next_cross+0x256>
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	28 2f       	mov	r18, r24
    1e16:	2f 5f       	subi	r18, 0xFF	; 255
    1e18:	2f 83       	std	Y+7, r18	; 0x07
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <go_upto_next_cross+0x25a>
    1e1c:	45 e0       	ldi	r20, 0x05	; 5
    1e1e:	4f 83       	std	Y+7, r20	; 0x07
    1e20:	5f 81       	ldd	r21, Y+7	; 0x07
    1e22:	5d 83       	std	Y+5, r21	; 0x05
			forward();
    1e24:	0e 94 84 0c 	call	0x1908	; 0x1908 <forward>
			mod_velocity(0,0);
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	0e 94 02 0c 	call	0x1804	; 0x1804 <mod_velocity>
			PORTJ = 0x99;
    1e34:	e5 e0       	ldi	r30, 0x05	; 5
    1e36:	f1 e0       	ldi	r31, 0x01	; 1
    1e38:	89 e9       	ldi	r24, 0x99	; 153
    1e3a:	80 83       	st	Z, r24
    1e3c:	d3 ce       	rjmp	.-602    	; 0x1be4 <go_upto_next_cross+0x1e>
		}
	}
	if(back){
    1e3e:	80 91 91 04 	lds	r24, 0x0491
    1e42:	88 23       	and	r24, r24
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <go_upto_next_cross+0x282>
    1e46:	ce c0       	rjmp	.+412    	; 0x1fe4 <go_upto_next_cross+0x41e>
		edges[x_pres+y_pres*6][facing]=0;
    1e48:	20 91 4c 03 	lds	r18, 0x034C
    1e4c:	30 91 4d 03 	lds	r19, 0x034D
    1e50:	c9 01       	movw	r24, r18
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	82 0f       	add	r24, r18
    1e58:	93 1f       	adc	r25, r19
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	9c 01       	movw	r18, r24
    1e60:	80 91 4a 03 	lds	r24, 0x034A
    1e64:	90 91 4b 03 	lds	r25, 0x034B
    1e68:	82 0f       	add	r24, r18
    1e6a:	93 1f       	adc	r25, r19
    1e6c:	20 91 52 03 	lds	r18, 0x0352
    1e70:	30 91 53 03 	lds	r19, 0x0353
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	82 0f       	add	r24, r18
    1e7e:	93 1f       	adc	r25, r19
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	fc 01       	movw	r30, r24
    1e86:	ee 56       	subi	r30, 0x6E	; 110
    1e88:	fb 4f       	sbci	r31, 0xFB	; 251
    1e8a:	11 82       	std	Z+1, r1	; 0x01
    1e8c:	10 82       	st	Z, r1
		dfs_init();
    1e8e:	0e 94 67 12 	call	0x24ce	; 0x24ce <dfs_init>
		int tmp=x_pres+y_pres*6;
    1e92:	20 91 4c 03 	lds	r18, 0x034C
    1e96:	30 91 4d 03 	lds	r19, 0x034D
    1e9a:	c9 01       	movw	r24, r18
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	82 0f       	add	r24, r18
    1ea2:	93 1f       	adc	r25, r19
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	80 91 4a 03 	lds	r24, 0x034A
    1eae:	90 91 4b 03 	lds	r25, 0x034B
    1eb2:	82 0f       	add	r24, r18
    1eb4:	93 1f       	adc	r25, r19
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8b 83       	std	Y+3, r24	; 0x03
		dfs(tmp, next_dest[pres_off]);
    1eba:	80 91 6b 06 	lds	r24, 0x066B
    1ebe:	90 91 6c 06 	lds	r25, 0x066C
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	eb 59       	subi	r30, 0x9B	; 155
    1eca:	fc 4f       	sbci	r31, 0xFC	; 252
    1ecc:	20 81       	ld	r18, Z
    1ece:	31 81       	ldd	r19, Z+1	; 0x01
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	b9 01       	movw	r22, r18
    1ed6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <dfs>

		//x_pres  = x_pres + (facing%2)*(facing-2);
		//y_pres  = y_pres + ((facing+1)%2)*(facing-1);
		
		
		path_off = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	90 93 b3 05 	sts	0x05B3, r25
    1ee2:	80 93 b2 05 	sts	0x05B2, r24
		set_dest(path_off);
    1ee6:	80 91 b2 05 	lds	r24, 0x05B2
    1eea:	90 91 b3 05 	lds	r25, 0x05B3
    1eee:	0e 94 8c 12 	call	0x2518	; 0x2518 <set_dest>
		int new_face =path[1] - tmp  ;
    1ef2:	20 91 2f 04 	lds	r18, 0x042F
    1ef6:	30 91 30 04 	lds	r19, 0x0430
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	a9 01       	movw	r20, r18
    1f00:	48 1b       	sub	r20, r24
    1f02:	59 0b       	sbc	r21, r25
    1f04:	ca 01       	movw	r24, r20
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
		if(new_face == -1){
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	5f ef       	ldi	r21, 0xFF	; 255
    1f10:	8f 3f       	cpi	r24, 0xFF	; 255
    1f12:	95 07       	cpc	r25, r21
    1f14:	29 f4       	brne	.+10     	; 0x1f20 <go_upto_next_cross+0x35a>
			tmp = 3;	
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9c 83       	std	Y+4, r25	; 0x04
    1f1c:	8b 83       	std	Y+3, r24	; 0x03
    1f1e:	17 c0       	rjmp	.+46     	; 0x1f4e <go_upto_next_cross+0x388>
		}
		else if(new_face==-6){
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	2f ef       	ldi	r18, 0xFF	; 255
    1f26:	8a 3f       	cpi	r24, 0xFA	; 250
    1f28:	92 07       	cpc	r25, r18
    1f2a:	29 f4       	brne	.+10     	; 0x1f36 <go_upto_next_cross+0x370>
			tmp = 2;
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	0c c0       	rjmp	.+24     	; 0x1f4e <go_upto_next_cross+0x388>
		}
		else if(new_face == 6){
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	86 30       	cpi	r24, 0x06	; 6
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	19 f4       	brne	.+6      	; 0x1f46 <go_upto_next_cross+0x380>
			tmp = 0;
    1f40:	1c 82       	std	Y+4, r1	; 0x04
    1f42:	1b 82       	std	Y+3, r1	; 0x03
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <go_upto_next_cross+0x388>
		}
		else {
			tmp = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
		}  

		if((tmp-facing)%2==0){
    1f4e:	20 91 52 03 	lds	r18, 0x0352
    1f52:	30 91 53 03 	lds	r19, 0x0353
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	82 1b       	sub	r24, r18
    1f5c:	93 0b       	sbc	r25, r19
    1f5e:	81 70       	andi	r24, 0x01	; 1
    1f60:	90 70       	andi	r25, 0x00	; 0
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	21 f4       	brne	.+8      	; 0x1f6e <go_upto_next_cross+0x3a8>
			turn_right();
    1f66:	0e 94 a7 0c 	call	0x194e	; 0x194e <turn_right>
			turn_right();
    1f6a:	0e 94 a7 0c 	call	0x194e	; 0x194e <turn_right>
		}
		if( tmp+3 == facing || tmp == facing+1){
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	9c 01       	movw	r18, r24
    1f74:	2d 5f       	subi	r18, 0xFD	; 253
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
    1f78:	80 91 52 03 	lds	r24, 0x0352
    1f7c:	90 91 53 03 	lds	r25, 0x0353
    1f80:	28 17       	cp	r18, r24
    1f82:	39 07       	cpc	r19, r25
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <go_upto_next_cross+0x3d8>
    1f86:	80 91 52 03 	lds	r24, 0x0352
    1f8a:	90 91 53 03 	lds	r25, 0x0353
    1f8e:	9c 01       	movw	r18, r24
    1f90:	2f 5f       	subi	r18, 0xFF	; 255
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	9c 81       	ldd	r25, Y+4	; 0x04
    1f98:	28 17       	cp	r18, r24
    1f9a:	39 07       	cpc	r19, r25
    1f9c:	19 f4       	brne	.+6      	; 0x1fa4 <go_upto_next_cross+0x3de>
			turn_right();
    1f9e:	0e 94 a7 0c 	call	0x194e	; 0x194e <turn_right>
    1fa2:	1a c0       	rjmp	.+52     	; 0x1fd8 <go_upto_next_cross+0x412>
		}
		else if ( tmp+1 == facing || tmp == facing+3){
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	9c 01       	movw	r18, r24
    1faa:	2f 5f       	subi	r18, 0xFF	; 255
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	80 91 52 03 	lds	r24, 0x0352
    1fb2:	90 91 53 03 	lds	r25, 0x0353
    1fb6:	28 17       	cp	r18, r24
    1fb8:	39 07       	cpc	r19, r25
    1fba:	61 f0       	breq	.+24     	; 0x1fd4 <go_upto_next_cross+0x40e>
    1fbc:	80 91 52 03 	lds	r24, 0x0352
    1fc0:	90 91 53 03 	lds	r25, 0x0353
    1fc4:	9c 01       	movw	r18, r24
    1fc6:	2d 5f       	subi	r18, 0xFD	; 253
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	28 17       	cp	r18, r24
    1fd0:	39 07       	cpc	r19, r25
    1fd2:	11 f4       	brne	.+4      	; 0x1fd8 <go_upto_next_cross+0x412>
			turn_left();
    1fd4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <turn_left>
		}
		facing = tmp;
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	90 93 53 03 	sts	0x0353, r25
    1fe0:	80 93 52 03 	sts	0x0352, r24
	}
}
    1fe4:	27 96       	adiw	r28, 0x07	; 7
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <find_type>:





int find_type(int pres,int dest){
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	2e 97       	sbiw	r28, 0x0e	; 14
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	9a 87       	std	Y+10, r25	; 0x0a
    200c:	89 87       	std	Y+9, r24	; 0x09
    200e:	7c 87       	std	Y+12, r23	; 0x0c
    2010:	6b 87       	std	Y+11, r22	; 0x0b
    
    int px=pres%6,py=pres/6,dx=dest%6,dy=dest/6;
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	26 e0       	ldi	r18, 0x06	; 6
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	b9 01       	movw	r22, r18
    201c:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2020:	98 87       	std	Y+8, r25	; 0x08
    2022:	8f 83       	std	Y+7, r24	; 0x07
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	26 e0       	ldi	r18, 0x06	; 6
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	b9 01       	movw	r22, r18
    202e:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2032:	cb 01       	movw	r24, r22
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	8b 85       	ldd	r24, Y+11	; 0x0b
    203a:	9c 85       	ldd	r25, Y+12	; 0x0c
    203c:	26 e0       	ldi	r18, 0x06	; 6
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	b9 01       	movw	r22, r18
    2042:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	8b 85       	ldd	r24, Y+11	; 0x0b
    204c:	9c 85       	ldd	r25, Y+12	; 0x0c
    204e:	26 e0       	ldi	r18, 0x06	; 6
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	b9 01       	movw	r22, r18
    2054:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2058:	cb 01       	movw	r24, r22
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
    if(px==dx && py==dy)        return -1;
    205e:	2f 81       	ldd	r18, Y+7	; 0x07
    2060:	38 85       	ldd	r19, Y+8	; 0x08
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	28 17       	cp	r18, r24
    2068:	39 07       	cpc	r19, r25
    206a:	61 f4       	brne	.+24     	; 0x2084 <find_type+0x8e>
    206c:	2d 81       	ldd	r18, Y+5	; 0x05
    206e:	3e 81       	ldd	r19, Y+6	; 0x06
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	28 17       	cp	r18, r24
    2076:	39 07       	cpc	r19, r25
    2078:	29 f4       	brne	.+10     	; 0x2084 <find_type+0x8e>
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	9f ef       	ldi	r25, 0xFF	; 255
    207e:	9e 87       	std	Y+14, r25	; 0x0e
    2080:	8d 87       	std	Y+13, r24	; 0x0d
    2082:	87 c0       	rjmp	.+270    	; 0x2192 <find_type+0x19c>
    else if(px==dx && py<dy)    return 0;
    2084:	2f 81       	ldd	r18, Y+7	; 0x07
    2086:	38 85       	ldd	r19, Y+8	; 0x08
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	28 17       	cp	r18, r24
    208e:	39 07       	cpc	r19, r25
    2090:	51 f4       	brne	.+20     	; 0x20a6 <find_type+0xb0>
    2092:	2d 81       	ldd	r18, Y+5	; 0x05
    2094:	3e 81       	ldd	r19, Y+6	; 0x06
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	28 17       	cp	r18, r24
    209c:	39 07       	cpc	r19, r25
    209e:	1c f4       	brge	.+6      	; 0x20a6 <find_type+0xb0>
    20a0:	1e 86       	std	Y+14, r1	; 0x0e
    20a2:	1d 86       	std	Y+13, r1	; 0x0d
    20a4:	76 c0       	rjmp	.+236    	; 0x2192 <find_type+0x19c>
    else if(px< dx && py<dy)    return 1;
    20a6:	2f 81       	ldd	r18, Y+7	; 0x07
    20a8:	38 85       	ldd	r19, Y+8	; 0x08
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	28 17       	cp	r18, r24
    20b0:	39 07       	cpc	r19, r25
    20b2:	64 f4       	brge	.+24     	; 0x20cc <find_type+0xd6>
    20b4:	2d 81       	ldd	r18, Y+5	; 0x05
    20b6:	3e 81       	ldd	r19, Y+6	; 0x06
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	28 17       	cp	r18, r24
    20be:	39 07       	cpc	r19, r25
    20c0:	2c f4       	brge	.+10     	; 0x20cc <find_type+0xd6>
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9e 87       	std	Y+14, r25	; 0x0e
    20c8:	8d 87       	std	Y+13, r24	; 0x0d
    20ca:	63 c0       	rjmp	.+198    	; 0x2192 <find_type+0x19c>
    else if(px< dx  && py==dy)  return 2;
    20cc:	2f 81       	ldd	r18, Y+7	; 0x07
    20ce:	38 85       	ldd	r19, Y+8	; 0x08
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	28 17       	cp	r18, r24
    20d6:	39 07       	cpc	r19, r25
    20d8:	64 f4       	brge	.+24     	; 0x20f2 <find_type+0xfc>
    20da:	2d 81       	ldd	r18, Y+5	; 0x05
    20dc:	3e 81       	ldd	r19, Y+6	; 0x06
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	28 17       	cp	r18, r24
    20e4:	39 07       	cpc	r19, r25
    20e6:	29 f4       	brne	.+10     	; 0x20f2 <find_type+0xfc>
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9e 87       	std	Y+14, r25	; 0x0e
    20ee:	8d 87       	std	Y+13, r24	; 0x0d
    20f0:	50 c0       	rjmp	.+160    	; 0x2192 <find_type+0x19c>
    else if(px< dx && py>dy)    return 3;
    20f2:	2f 81       	ldd	r18, Y+7	; 0x07
    20f4:	38 85       	ldd	r19, Y+8	; 0x08
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	9c 81       	ldd	r25, Y+4	; 0x04
    20fa:	28 17       	cp	r18, r24
    20fc:	39 07       	cpc	r19, r25
    20fe:	64 f4       	brge	.+24     	; 0x2118 <find_type+0x122>
    2100:	2d 81       	ldd	r18, Y+5	; 0x05
    2102:	3e 81       	ldd	r19, Y+6	; 0x06
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	82 17       	cp	r24, r18
    210a:	93 07       	cpc	r25, r19
    210c:	2c f4       	brge	.+10     	; 0x2118 <find_type+0x122>
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9e 87       	std	Y+14, r25	; 0x0e
    2114:	8d 87       	std	Y+13, r24	; 0x0d
    2116:	3d c0       	rjmp	.+122    	; 0x2192 <find_type+0x19c>
    else if(px==dx && py>dy)    return 4;
    2118:	2f 81       	ldd	r18, Y+7	; 0x07
    211a:	38 85       	ldd	r19, Y+8	; 0x08
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	28 17       	cp	r18, r24
    2122:	39 07       	cpc	r19, r25
    2124:	61 f4       	brne	.+24     	; 0x213e <find_type+0x148>
    2126:	2d 81       	ldd	r18, Y+5	; 0x05
    2128:	3e 81       	ldd	r19, Y+6	; 0x06
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	82 17       	cp	r24, r18
    2130:	93 07       	cpc	r25, r19
    2132:	2c f4       	brge	.+10     	; 0x213e <find_type+0x148>
    2134:	84 e0       	ldi	r24, 0x04	; 4
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9e 87       	std	Y+14, r25	; 0x0e
    213a:	8d 87       	std	Y+13, r24	; 0x0d
    213c:	2a c0       	rjmp	.+84     	; 0x2192 <find_type+0x19c>
    else if(px> dx && py>dy)    return 5;
    213e:	2f 81       	ldd	r18, Y+7	; 0x07
    2140:	38 85       	ldd	r19, Y+8	; 0x08
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	82 17       	cp	r24, r18
    2148:	93 07       	cpc	r25, r19
    214a:	64 f4       	brge	.+24     	; 0x2164 <find_type+0x16e>
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	82 17       	cp	r24, r18
    2156:	93 07       	cpc	r25, r19
    2158:	2c f4       	brge	.+10     	; 0x2164 <find_type+0x16e>
    215a:	85 e0       	ldi	r24, 0x05	; 5
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e 87       	std	Y+14, r25	; 0x0e
    2160:	8d 87       	std	Y+13, r24	; 0x0d
    2162:	17 c0       	rjmp	.+46     	; 0x2192 <find_type+0x19c>
    else if(px> dx && py==dy)   return 6;
    2164:	2f 81       	ldd	r18, Y+7	; 0x07
    2166:	38 85       	ldd	r19, Y+8	; 0x08
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	82 17       	cp	r24, r18
    216e:	93 07       	cpc	r25, r19
    2170:	64 f4       	brge	.+24     	; 0x218a <find_type+0x194>
    2172:	2d 81       	ldd	r18, Y+5	; 0x05
    2174:	3e 81       	ldd	r19, Y+6	; 0x06
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	28 17       	cp	r18, r24
    217c:	39 07       	cpc	r19, r25
    217e:	29 f4       	brne	.+10     	; 0x218a <find_type+0x194>
    2180:	86 e0       	ldi	r24, 0x06	; 6
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9e 87       	std	Y+14, r25	; 0x0e
    2186:	8d 87       	std	Y+13, r24	; 0x0d
    2188:	04 c0       	rjmp	.+8      	; 0x2192 <find_type+0x19c>
    else  return 7;
    218a:	87 e0       	ldi	r24, 0x07	; 7
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	9e 87       	std	Y+14, r25	; 0x0e
    2190:	8d 87       	std	Y+13, r24	; 0x0d
    2192:	8d 85       	ldd	r24, Y+13	; 0x0d
    2194:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2196:	2e 96       	adiw	r28, 0x0e	; 14
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <dfs>:

int dfs(int pres, int dest){
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	2a 97       	sbiw	r28, 0x0a	; 10
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	78 87       	std	Y+8, r23	; 0x08
    21c2:	6f 83       	std	Y+7, r22	; 0x07
    
    if(dest==pres){         
    21c4:	2f 81       	ldd	r18, Y+7	; 0x07
    21c6:	38 85       	ldd	r19, Y+8	; 0x08
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	28 17       	cp	r18, r24
    21ce:	39 07       	cpc	r19, r25
    21d0:	c9 f4       	brne	.+50     	; 0x2204 <__stack+0x5>
         path[off++]=pres;
    21d2:	20 91 86 06 	lds	r18, 0x0686
    21d6:	30 91 87 06 	lds	r19, 0x0687
    21da:	c9 01       	movw	r24, r18
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	fc 01       	movw	r30, r24
    21e2:	e3 5d       	subi	r30, 0xD3	; 211
    21e4:	fb 4f       	sbci	r31, 0xFB	; 251
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
    21ee:	c9 01       	movw	r24, r18
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	90 93 87 06 	sts	0x0687, r25
    21f6:	80 93 86 06 	sts	0x0686, r24
         return 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9a 87       	std	Y+10, r25	; 0x0a
    2200:	89 87       	std	Y+9, r24	; 0x09
    2202:	5a c1       	rjmp	.+692    	; 0x24b8 <__stack+0x2b9>
     }
     if(visit[pres]) return 0;
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	fc 01       	movw	r30, r24
    220e:	e6 5e       	subi	r30, 0xE6	; 230
    2210:	f9 4f       	sbci	r31, 0xF9	; 249
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	19 f0       	breq	.+6      	; 0x2220 <__stack+0x21>
    221a:	1a 86       	std	Y+10, r1	; 0x0a
    221c:	19 86       	std	Y+9, r1	; 0x09
    221e:	4c c1       	rjmp	.+664    	; 0x24b8 <__stack+0x2b9>
     visit[pres]=1;
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	fc 01       	movw	r30, r24
    222a:	e6 5e       	subi	r30, 0xE6	; 230
    222c:	f9 4f       	sbci	r31, 0xF9	; 249
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
     path[off++]=pres;
    2236:	20 91 86 06 	lds	r18, 0x0686
    223a:	30 91 87 06 	lds	r19, 0x0687
    223e:	c9 01       	movw	r24, r18
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	fc 01       	movw	r30, r24
    2246:	e3 5d       	subi	r30, 0xD3	; 211
    2248:	fb 4f       	sbci	r31, 0xFB	; 251
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	80 83       	st	Z, r24
    2252:	c9 01       	movw	r24, r18
    2254:	01 96       	adiw	r24, 0x01	; 1
    2256:	90 93 87 06 	sts	0x0687, r25
    225a:	80 93 86 06 	sts	0x0686, r24
     
    int x,type =  find_type(pres,dest);
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	2f 81       	ldd	r18, Y+7	; 0x07
    2264:	38 85       	ldd	r19, Y+8	; 0x08
    2266:	b9 01       	movw	r22, r18
    2268:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <find_type>
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
    
    type = priority[type];
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	fc 01       	movw	r30, r24
    227a:	e8 5f       	subi	r30, 0xF8	; 248
    227c:	fd 4f       	sbci	r31, 0xFD	; 253
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01
    if(edges[pres][type/1000]){
    2286:	ed 81       	ldd	r30, Y+5	; 0x05
    2288:	fe 81       	ldd	r31, Y+6	; 0x06
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	28 ee       	ldi	r18, 0xE8	; 232
    2290:	33 e0       	ldi	r19, 0x03	; 3
    2292:	b9 01       	movw	r22, r18
    2294:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2298:	cb 01       	movw	r24, r22
    229a:	9c 01       	movw	r18, r24
    229c:	cf 01       	movw	r24, r30
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	fc 01       	movw	r30, r24
    22b0:	ee 56       	subi	r30, 0x6E	; 110
    22b2:	fb 4f       	sbci	r31, 0xFB	; 251
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	21 f1       	breq	.+72     	; 0x2304 <__stack+0x105>
        x = dfs(pres+offset[type/1000], dest);
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	28 ee       	ldi	r18, 0xE8	; 232
    22c2:	33 e0       	ldi	r19, 0x03	; 3
    22c4:	b9 01       	movw	r22, r18
    22c6:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    22ca:	cb 01       	movw	r24, r22
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	fc 01       	movw	r30, r24
    22d2:	e8 5e       	subi	r30, 0xE8	; 232
    22d4:	fd 4f       	sbci	r31, 0xFD	; 253
    22d6:	20 81       	ld	r18, Z
    22d8:	31 81       	ldd	r19, Z+1	; 0x01
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	9e 81       	ldd	r25, Y+6	; 0x06
    22de:	82 0f       	add	r24, r18
    22e0:	93 1f       	adc	r25, r19
    22e2:	2f 81       	ldd	r18, Y+7	; 0x07
    22e4:	38 85       	ldd	r19, Y+8	; 0x08
    22e6:	b9 01       	movw	r22, r18
    22e8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <dfs>
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	8b 83       	std	Y+3, r24	; 0x03
        if(x==1)return 1; 
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	91 05       	cpc	r25, r1
    22f8:	29 f4       	brne	.+10     	; 0x2304 <__stack+0x105>
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9a 87       	std	Y+10, r25	; 0x0a
    2300:	89 87       	std	Y+9, r24	; 0x09
    2302:	da c0       	rjmp	.+436    	; 0x24b8 <__stack+0x2b9>
    }
    if(edges[pres][(type/100)%10]){
    2304:	ed 81       	ldd	r30, Y+5	; 0x05
    2306:	fe 81       	ldd	r31, Y+6	; 0x06
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	9a 81       	ldd	r25, Y+2	; 0x02
    230c:	24 e6       	ldi	r18, 0x64	; 100
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	b9 01       	movw	r22, r18
    2312:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2316:	cb 01       	movw	r24, r22
    2318:	2a e0       	ldi	r18, 0x0A	; 10
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	b9 01       	movw	r22, r18
    231e:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2322:	9c 01       	movw	r18, r24
    2324:	cf 01       	movw	r24, r30
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	82 0f       	add	r24, r18
    2330:	93 1f       	adc	r25, r19
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	fc 01       	movw	r30, r24
    2338:	ee 56       	subi	r30, 0x6E	; 110
    233a:	fb 4f       	sbci	r31, 0xFB	; 251
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	49 f1       	breq	.+82     	; 0x2396 <__stack+0x197>
        x = dfs(pres+offset[(type/100)%10], dest);
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	24 e6       	ldi	r18, 0x64	; 100
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	b9 01       	movw	r22, r18
    234e:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2352:	cb 01       	movw	r24, r22
    2354:	2a e0       	ldi	r18, 0x0A	; 10
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	b9 01       	movw	r22, r18
    235a:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	fc 01       	movw	r30, r24
    2364:	e8 5e       	subi	r30, 0xE8	; 232
    2366:	fd 4f       	sbci	r31, 0xFD	; 253
    2368:	20 81       	ld	r18, Z
    236a:	31 81       	ldd	r19, Z+1	; 0x01
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	82 0f       	add	r24, r18
    2372:	93 1f       	adc	r25, r19
    2374:	2f 81       	ldd	r18, Y+7	; 0x07
    2376:	38 85       	ldd	r19, Y+8	; 0x08
    2378:	b9 01       	movw	r22, r18
    237a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <dfs>
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	8b 83       	std	Y+3, r24	; 0x03
        if(x==1)return 1;
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	91 05       	cpc	r25, r1
    238a:	29 f4       	brne	.+10     	; 0x2396 <__stack+0x197>
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	9a 87       	std	Y+10, r25	; 0x0a
    2392:	89 87       	std	Y+9, r24	; 0x09
    2394:	91 c0       	rjmp	.+290    	; 0x24b8 <__stack+0x2b9>
        }
    if(edges[pres][(type/10)%10]){
    2396:	ed 81       	ldd	r30, Y+5	; 0x05
    2398:	fe 81       	ldd	r31, Y+6	; 0x06
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	2a e0       	ldi	r18, 0x0A	; 10
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	b9 01       	movw	r22, r18
    23a4:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    23a8:	cb 01       	movw	r24, r22
    23aa:	2a e0       	ldi	r18, 0x0A	; 10
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	b9 01       	movw	r22, r18
    23b0:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    23b4:	9c 01       	movw	r18, r24
    23b6:	cf 01       	movw	r24, r30
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	82 0f       	add	r24, r18
    23c2:	93 1f       	adc	r25, r19
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	fc 01       	movw	r30, r24
    23ca:	ee 56       	subi	r30, 0x6E	; 110
    23cc:	fb 4f       	sbci	r31, 0xFB	; 251
    23ce:	80 81       	ld	r24, Z
    23d0:	91 81       	ldd	r25, Z+1	; 0x01
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	49 f1       	breq	.+82     	; 0x2428 <__stack+0x229>
        x = dfs(pres+offset[(type/10)%10], dest);
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	2a e0       	ldi	r18, 0x0A	; 10
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	b9 01       	movw	r22, r18
    23e0:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    23e4:	cb 01       	movw	r24, r22
    23e6:	2a e0       	ldi	r18, 0x0A	; 10
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	b9 01       	movw	r22, r18
    23ec:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	fc 01       	movw	r30, r24
    23f6:	e8 5e       	subi	r30, 0xE8	; 232
    23f8:	fd 4f       	sbci	r31, 0xFD	; 253
    23fa:	20 81       	ld	r18, Z
    23fc:	31 81       	ldd	r19, Z+1	; 0x01
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	9e 81       	ldd	r25, Y+6	; 0x06
    2402:	82 0f       	add	r24, r18
    2404:	93 1f       	adc	r25, r19
    2406:	2f 81       	ldd	r18, Y+7	; 0x07
    2408:	38 85       	ldd	r19, Y+8	; 0x08
    240a:	b9 01       	movw	r22, r18
    240c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <dfs>
    2410:	9c 83       	std	Y+4, r25	; 0x04
    2412:	8b 83       	std	Y+3, r24	; 0x03
        if(x==1)return 1;
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	29 f4       	brne	.+10     	; 0x2428 <__stack+0x229>
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9a 87       	std	Y+10, r25	; 0x0a
    2424:	89 87       	std	Y+9, r24	; 0x09
    2426:	48 c0       	rjmp	.+144    	; 0x24b8 <__stack+0x2b9>
    }
    if(edges[pres][type%10]){
    2428:	ed 81       	ldd	r30, Y+5	; 0x05
    242a:	fe 81       	ldd	r31, Y+6	; 0x06
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	2a e0       	ldi	r18, 0x0A	; 10
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	b9 01       	movw	r22, r18
    2436:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    243a:	9c 01       	movw	r18, r24
    243c:	cf 01       	movw	r24, r30
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	82 0f       	add	r24, r18
    2448:	93 1f       	adc	r25, r19
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	fc 01       	movw	r30, r24
    2450:	ee 56       	subi	r30, 0x6E	; 110
    2452:	fb 4f       	sbci	r31, 0xFB	; 251
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	19 f1       	breq	.+70     	; 0x24a2 <__stack+0x2a3>
        x = dfs(pres+offset[type%10], dest);
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	2a e0       	ldi	r18, 0x0A	; 10
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	b9 01       	movw	r22, r18
    2466:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	fc 01       	movw	r30, r24
    2470:	e8 5e       	subi	r30, 0xE8	; 232
    2472:	fd 4f       	sbci	r31, 0xFD	; 253
    2474:	20 81       	ld	r18, Z
    2476:	31 81       	ldd	r19, Z+1	; 0x01
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	82 0f       	add	r24, r18
    247e:	93 1f       	adc	r25, r19
    2480:	2f 81       	ldd	r18, Y+7	; 0x07
    2482:	38 85       	ldd	r19, Y+8	; 0x08
    2484:	b9 01       	movw	r22, r18
    2486:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <dfs>
    248a:	9c 83       	std	Y+4, r25	; 0x04
    248c:	8b 83       	std	Y+3, r24	; 0x03
        if(x==1)return 1;
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	81 30       	cpi	r24, 0x01	; 1
    2494:	91 05       	cpc	r25, r1
    2496:	29 f4       	brne	.+10     	; 0x24a2 <__stack+0x2a3>
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9a 87       	std	Y+10, r25	; 0x0a
    249e:	89 87       	std	Y+9, r24	; 0x09
    24a0:	0b c0       	rjmp	.+22     	; 0x24b8 <__stack+0x2b9>
    }
    off--;
    24a2:	80 91 86 06 	lds	r24, 0x0686
    24a6:	90 91 87 06 	lds	r25, 0x0687
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	90 93 87 06 	sts	0x0687, r25
    24b0:	80 93 86 06 	sts	0x0686, r24
    return 0;
    24b4:	1a 86       	std	Y+10, r1	; 0x0a
    24b6:	19 86       	std	Y+9, r1	; 0x09
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    24bc:	2a 96       	adiw	r28, 0x0a	; 10
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <dfs_init>:

void dfs_init(){
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	0f 92       	push	r0
    24d4:	0f 92       	push	r0
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
	int i;
	for(i=0;i<36;i++) visit[i]=0;
    24da:	1a 82       	std	Y+2, r1	; 0x02
    24dc:	19 82       	std	Y+1, r1	; 0x01
    24de:	0e c0       	rjmp	.+28     	; 0x24fc <dfs_init+0x2e>
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	9a 81       	ldd	r25, Y+2	; 0x02
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	fc 01       	movw	r30, r24
    24ea:	e6 5e       	subi	r30, 0xE6	; 230
    24ec:	f9 4f       	sbci	r31, 0xF9	; 249
    24ee:	11 82       	std	Z+1, r1	; 0x01
    24f0:	10 82       	st	Z, r1
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	9a 83       	std	Y+2, r25	; 0x02
    24fa:	89 83       	std	Y+1, r24	; 0x01
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	84 32       	cpi	r24, 0x24	; 36
    2502:	91 05       	cpc	r25, r1
    2504:	6c f3       	brlt	.-38     	; 0x24e0 <dfs_init+0x12>
	off=0;
    2506:	10 92 87 06 	sts	0x0687, r1
    250a:	10 92 86 06 	sts	0x0686, r1
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <set_dest>:

void set_dest(int i){
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	0f 92       	push	r0
    251e:	0f 92       	push	r0
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
    2524:	9a 83       	std	Y+2, r25	; 0x02
    2526:	89 83       	std	Y+1, r24	; 0x01
	x_dest=path[i]%6;
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	9a 81       	ldd	r25, Y+2	; 0x02
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	fc 01       	movw	r30, r24
    2532:	e3 5d       	subi	r30, 0xD3	; 211
    2534:	fb 4f       	sbci	r31, 0xFB	; 251
    2536:	80 81       	ld	r24, Z
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	26 e0       	ldi	r18, 0x06	; 6
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	b9 01       	movw	r22, r18
    2540:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2544:	90 93 4f 03 	sts	0x034F, r25
    2548:	80 93 4e 03 	sts	0x034E, r24
	y_dest=path[i]/6;
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	fc 01       	movw	r30, r24
    2556:	e3 5d       	subi	r30, 0xD3	; 211
    2558:	fb 4f       	sbci	r31, 0xFB	; 251
    255a:	80 81       	ld	r24, Z
    255c:	91 81       	ldd	r25, Z+1	; 0x01
    255e:	26 e0       	ldi	r18, 0x06	; 6
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	b9 01       	movw	r22, r18
    2564:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__divmodhi4>
    2568:	cb 01       	movw	r24, r22
    256a:	90 93 51 03 	sts	0x0351, r25
    256e:	80 93 50 03 	sts	0x0350, r24
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <init>:

void init(){
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <init+0x6>
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
	int i,j;
	for (i=0;i<36;i++){
    2588:	1c 82       	std	Y+4, r1	; 0x04
    258a:	1b 82       	std	Y+3, r1	; 0x03
    258c:	25 c0       	rjmp	.+74     	; 0x25d8 <init+0x5c>
		for (j=0;j<4;j++)edges[i][j]=1;
    258e:	1a 82       	std	Y+2, r1	; 0x02
    2590:	19 82       	std	Y+1, r1	; 0x01
    2592:	18 c0       	rjmp	.+48     	; 0x25c4 <init+0x48>
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	29 81       	ldd	r18, Y+1	; 0x01
    259a:	3a 81       	ldd	r19, Y+2	; 0x02
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	82 0f       	add	r24, r18
    25a6:	93 1f       	adc	r25, r19
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	fc 01       	movw	r30, r24
    25ae:	ee 56       	subi	r30, 0x6E	; 110
    25b0:	fb 4f       	sbci	r31, 0xFB	; 251
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
    25be:	01 96       	adiw	r24, 0x01	; 1
    25c0:	9a 83       	std	Y+2, r25	; 0x02
    25c2:	89 83       	std	Y+1, r24	; 0x01
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	84 30       	cpi	r24, 0x04	; 4
    25ca:	91 05       	cpc	r25, r1
    25cc:	1c f3       	brlt	.-58     	; 0x2594 <init+0x18>
	y_dest=path[i]/6;
}

void init(){
	int i,j;
	for (i=0;i<36;i++){
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	9c 81       	ldd	r25, Y+4	; 0x04
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	84 32       	cpi	r24, 0x24	; 36
    25de:	91 05       	cpc	r25, r1
    25e0:	b4 f2       	brlt	.-84     	; 0x258e <init+0x12>
		for (j=0;j<4;j++)edges[i][j]=1;
	}
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <bluetooth>:
/**
message formats:
"STOP": stop ASAP (in next junction) : len = 4
"MOVE x y":add (x,y) to the list of next_destinations : len = 8
**/
void bluetooth(){
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	62 97       	sbiw	r28, 0x12	; 18
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
	int tmpx,tmpy;
	if(len==4 && strncmp("STOP",inpStr,4)==0){
    2604:	80 91 8e 06 	lds	r24, 0x068E
    2608:	90 91 8f 06 	lds	r25, 0x068F
    260c:	84 30       	cpi	r24, 0x04	; 4
    260e:	91 05       	cpc	r25, r1
    2610:	a1 f4       	brne	.+40     	; 0x263a <bluetooth+0x4a>
    2612:	20 91 77 06 	lds	r18, 0x0677
    2616:	30 91 78 06 	lds	r19, 0x0678
    261a:	82 e2       	ldi	r24, 0x22	; 34
    261c:	92 e0       	ldi	r25, 0x02	; 2
    261e:	b9 01       	movw	r22, r18
    2620:	44 e0       	ldi	r20, 0x04	; 4
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	0e 94 c4 1c 	call	0x3988	; 0x3988 <strncmp>
    2628:	00 97       	sbiw	r24, 0x00	; 0
    262a:	39 f4       	brne	.+14     	; 0x263a <bluetooth+0x4a>
		next_stop = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	90 93 60 03 	sts	0x0360, r25
    2634:	80 93 5f 03 	sts	0x035F, r24
    2638:	61 c0       	rjmp	.+194    	; 0x26fc <bluetooth+0x10c>
	}
	else if(len==8 && strncmp("MOVE",inpStr,4)==0){
    263a:	80 91 8e 06 	lds	r24, 0x068E
    263e:	90 91 8f 06 	lds	r25, 0x068F
    2642:	88 30       	cpi	r24, 0x08	; 8
    2644:	91 05       	cpc	r25, r1
    2646:	09 f0       	breq	.+2      	; 0x264a <bluetooth+0x5a>
    2648:	59 c0       	rjmp	.+178    	; 0x26fc <bluetooth+0x10c>
    264a:	20 91 77 06 	lds	r18, 0x0677
    264e:	30 91 78 06 	lds	r19, 0x0678
    2652:	87 e2       	ldi	r24, 0x27	; 39
    2654:	92 e0       	ldi	r25, 0x02	; 2
    2656:	b9 01       	movw	r22, r18
    2658:	44 e0       	ldi	r20, 0x04	; 4
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <strncmp>
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	09 f0       	breq	.+2      	; 0x2666 <bluetooth+0x76>
    2664:	4b c0       	rjmp	.+150    	; 0x26fc <bluetooth+0x10c>
		tmpx = (inpStr[5]-'0');
    2666:	80 91 77 06 	lds	r24, 0x0677
    266a:	90 91 78 06 	lds	r25, 0x0678
    266e:	fc 01       	movw	r30, r24
    2670:	35 96       	adiw	r30, 0x05	; 5
    2672:	80 81       	ld	r24, Z
    2674:	88 2f       	mov	r24, r24
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	c0 97       	sbiw	r24, 0x30	; 48
    267a:	9a 8b       	std	Y+18, r25	; 0x12
    267c:	89 8b       	std	Y+17, r24	; 0x11
		tmpy = (inpStr[7]-'0');
    267e:	80 91 77 06 	lds	r24, 0x0677
    2682:	90 91 78 06 	lds	r25, 0x0678
    2686:	fc 01       	movw	r30, r24
    2688:	37 96       	adiw	r30, 0x07	; 7
    268a:	80 81       	ld	r24, Z
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	c0 97       	sbiw	r24, 0x30	; 48
    2692:	98 8b       	std	Y+16, r25	; 0x10
    2694:	8f 87       	std	Y+15, r24	; 0x0f
		if(off_d == pres_off){
    2696:	20 91 7e 06 	lds	r18, 0x067E
    269a:	30 91 7f 06 	lds	r19, 0x067F
    269e:	80 91 6b 06 	lds	r24, 0x066B
    26a2:	90 91 6c 06 	lds	r25, 0x066C
    26a6:	28 17       	cp	r18, r24
    26a8:	39 07       	cpc	r19, r25
    26aa:	41 f4       	brne	.+16     	; 0x26bc <bluetooth+0xcc>
			off_d=0;
    26ac:	10 92 7f 06 	sts	0x067F, r1
    26b0:	10 92 7e 06 	sts	0x067E, r1
			pres_off=0;
    26b4:	10 92 6c 06 	sts	0x066C, r1
    26b8:	10 92 6b 06 	sts	0x066B, r1
		}
		next_dest[off_d++]=tmpx+tmpy*6;
    26bc:	40 91 7e 06 	lds	r20, 0x067E
    26c0:	50 91 7f 06 	lds	r21, 0x067F
    26c4:	2f 85       	ldd	r18, Y+15	; 0x0f
    26c6:	38 89       	ldd	r19, Y+16	; 0x10
    26c8:	c9 01       	movw	r24, r18
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	82 0f       	add	r24, r18
    26d0:	93 1f       	adc	r25, r19
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	9c 01       	movw	r18, r24
    26d8:	89 89       	ldd	r24, Y+17	; 0x11
    26da:	9a 89       	ldd	r25, Y+18	; 0x12
    26dc:	28 0f       	add	r18, r24
    26de:	39 1f       	adc	r19, r25
    26e0:	ca 01       	movw	r24, r20
    26e2:	88 0f       	add	r24, r24
    26e4:	99 1f       	adc	r25, r25
    26e6:	fc 01       	movw	r30, r24
    26e8:	eb 59       	subi	r30, 0x9B	; 155
    26ea:	fc 4f       	sbci	r31, 0xFC	; 252
    26ec:	31 83       	std	Z+1, r19	; 0x01
    26ee:	20 83       	st	Z, r18
    26f0:	ca 01       	movw	r24, r20
    26f2:	01 96       	adiw	r24, 0x01	; 1
    26f4:	90 93 7f 06 	sts	0x067F, r25
    26f8:	80 93 7e 06 	sts	0x067E, r24
	}
	read_inp  = 0;
    26fc:	10 92 62 03 	sts	0x0362, r1
    2700:	10 92 61 03 	sts	0x0361, r1
	lcd_cursor(2,1);
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	lcd_string("got it");
    270c:	8c e2       	ldi	r24, 0x2C	; 44
    270e:	92 e0       	ldi	r25, 0x02	; 2
    2710:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	aa ef       	ldi	r26, 0xFA	; 250
    271a:	b4 e4       	ldi	r27, 0x44	; 68
    271c:	8b 87       	std	Y+11, r24	; 0x0b
    271e:	9c 87       	std	Y+12, r25	; 0x0c
    2720:	ad 87       	std	Y+13, r26	; 0x0d
    2722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2724:	6b 85       	ldd	r22, Y+11	; 0x0b
    2726:	7c 85       	ldd	r23, Y+12	; 0x0c
    2728:	8d 85       	ldd	r24, Y+13	; 0x0d
    272a:	9e 85       	ldd	r25, Y+14	; 0x0e
    272c:	26 e6       	ldi	r18, 0x66	; 102
    272e:	3e e4       	ldi	r19, 0x4E	; 78
    2730:	43 e6       	ldi	r20, 0x63	; 99
    2732:	55 e4       	ldi	r21, 0x45	; 69
    2734:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	8f 83       	std	Y+7, r24	; 0x07
    273e:	98 87       	std	Y+8, r25	; 0x08
    2740:	a9 87       	std	Y+9, r26	; 0x09
    2742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2744:	6f 81       	ldd	r22, Y+7	; 0x07
    2746:	78 85       	ldd	r23, Y+8	; 0x08
    2748:	89 85       	ldd	r24, Y+9	; 0x09
    274a:	9a 85       	ldd	r25, Y+10	; 0x0a
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e8       	ldi	r20, 0x80	; 128
    2752:	5f e3       	ldi	r21, 0x3F	; 63
    2754:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
    2758:	88 23       	and	r24, r24
    275a:	2c f4       	brge	.+10     	; 0x2766 <bluetooth+0x176>
		__ticks = 1;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	3f c0       	rjmp	.+126    	; 0x27e4 <bluetooth+0x1f4>
	else if (__tmp > 65535)
    2766:	6f 81       	ldd	r22, Y+7	; 0x07
    2768:	78 85       	ldd	r23, Y+8	; 0x08
    276a:	89 85       	ldd	r24, Y+9	; 0x09
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	3f ef       	ldi	r19, 0xFF	; 255
    2772:	4f e7       	ldi	r20, 0x7F	; 127
    2774:	57 e4       	ldi	r21, 0x47	; 71
    2776:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
    277a:	18 16       	cp	r1, r24
    277c:	4c f5       	brge	.+82     	; 0x27d0 <bluetooth+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2780:	7c 85       	ldd	r23, Y+12	; 0x0c
    2782:	8d 85       	ldd	r24, Y+13	; 0x0d
    2784:	9e 85       	ldd	r25, Y+14	; 0x0e
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e2       	ldi	r20, 0x20	; 32
    278c:	51 e4       	ldi	r21, 0x41	; 65
    278e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	0f c0       	rjmp	.+30     	; 0x27c6 <bluetooth+0x1d6>
    27a8:	8b e6       	ldi	r24, 0x6B	; 107
    27aa:	91 e0       	ldi	r25, 0x01	; 1
    27ac:	9c 83       	std	Y+4, r25	; 0x04
    27ae:	8b 83       	std	Y+3, r24	; 0x03
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <bluetooth+0x1c4>
    27b8:	9c 83       	std	Y+4, r25	; 0x04
    27ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27bc:	8d 81       	ldd	r24, Y+5	; 0x05
    27be:	9e 81       	ldd	r25, Y+6	; 0x06
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	69 f7       	brne	.-38     	; 0x27a8 <bluetooth+0x1b8>
    27ce:	14 c0       	rjmp	.+40     	; 0x27f8 <bluetooth+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d0:	6f 81       	ldd	r22, Y+7	; 0x07
    27d2:	78 85       	ldd	r23, Y+8	; 0x08
    27d4:	89 85       	ldd	r24, Y+9	; 0x09
    27d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	8d 81       	ldd	r24, Y+5	; 0x05
    27e6:	9e 81       	ldd	r25, Y+6	; 0x06
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <bluetooth+0x200>
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    27f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
}
    27f8:	62 96       	adiw	r28, 0x12	; 18
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <Init_USART3>:
	Baud Rate = 9600
	8 bit
	No Parity
	Transmit and Recieve interrupt Enable*/
void Init_USART3()
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
	UCSR3C = 0x06;
	UBRR3L = 0x5F;
	UBRR3H = 0x00;
	UCSR3B = 0x98;*/

	 UCSR3B = 0x00; //disable while setting baud rate
    2812:	e1 e3       	ldi	r30, 0x31	; 49
    2814:	f1 e0       	ldi	r31, 0x01	; 1
    2816:	10 82       	st	Z, r1
	 UCSR3A = 0x00;
    2818:	e0 e3       	ldi	r30, 0x30	; 48
    281a:	f1 e0       	ldi	r31, 0x01	; 1
    281c:	10 82       	st	Z, r1
	 UCSR3C = 0x06;
    281e:	e2 e3       	ldi	r30, 0x32	; 50
    2820:	f1 e0       	ldi	r31, 0x01	; 1
    2822:	86 e0       	ldi	r24, 0x06	; 6
    2824:	80 83       	st	Z, r24
	 //This is for 14745600
	 //UBRR3L = 0x5F; //set baud rate lo
	 UBRR3L = 0x5F;
    2826:	e4 e3       	ldi	r30, 0x34	; 52
    2828:	f1 e0       	ldi	r31, 0x01	; 1
    282a:	8f e5       	ldi	r24, 0x5F	; 95
    282c:	80 83       	st	Z, r24
	 UBRR3H = 0x00; //set baud rate hi
    282e:	e5 e3       	ldi	r30, 0x35	; 53
    2830:	f1 e0       	ldi	r31, 0x01	; 1
    2832:	10 82       	st	Z, r1
	 UCSR3B = 0x98;
    2834:	e1 e3       	ldi	r30, 0x31	; 49
    2836:	f1 e0       	ldi	r31, 0x01	; 1
    2838:	88 e9       	ldi	r24, 0x98	; 152
    283a:	80 83       	st	Z, r24
}
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <__vector_54>:
	Returns Character String Arrived in main_buf array
	Indicates Main Routine after Whole String Has Arrived*/

int i;
SIGNAL(SIG_USART3_RECV)
{
    2842:	1f 92       	push	r1
    2844:	0f 92       	push	r0
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	0f 92       	push	r0
    284a:	00 90 5b 00 	lds	r0, 0x005B
    284e:	0f 92       	push	r0
    2850:	11 24       	eor	r1, r1
    2852:	8f 93       	push	r24
    2854:	ef 93       	push	r30
    2856:	ff 93       	push	r31
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62

 	data = UDR3;
    2860:	e6 e3       	ldi	r30, 0x36	; 54
    2862:	f1 e0       	ldi	r31, 0x01	; 1
    2864:	80 81       	ld	r24, Z
    2866:	80 93 7d 06 	sts	0x067D, r24
		len = backlen;
		for(i=0;i<len;i++)inpStr[i]=backup[i];
		inpStr[len] = 0;
		backlen = 0;
	}*/
}
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	ff 91       	pop	r31
    2870:	ef 91       	pop	r30
    2872:	8f 91       	pop	r24
    2874:	0f 90       	pop	r0
    2876:	00 92 5b 00 	sts	0x005B, r0
    287a:	0f 90       	pop	r0
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	0f 90       	pop	r0
    2880:	1f 90       	pop	r1
    2882:	18 95       	reti

00002884 <initAll>:
#include "motion.h"
#include "funcs.h"
#include <stdio.h>
#include "bt.h"
#include <stdlib.h>
void initAll(){
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
	Init_USART3();
    288c:	0e 94 05 14 	call	0x280a	; 0x280a <Init_USART3>
	inpStr = (char*)malloc(100);
    2890:	84 e6       	ldi	r24, 0x64	; 100
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	0e 94 bf 1b 	call	0x377e	; 0x377e <malloc>
    2898:	90 93 78 06 	sts	0x0678, r25
    289c:	80 93 77 06 	sts	0x0677, r24
	backup=(char*)malloc(100);
    28a0:	84 e6       	ldi	r24, 0x64	; 100
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 bf 1b 	call	0x377e	; 0x377e <malloc>
    28a8:	90 93 89 06 	sts	0x0689, r25
    28ac:	80 93 88 06 	sts	0x0688, r24
	init_devices();
    28b0:	0e 94 98 0c 	call	0x1930	; 0x1930 <init_devices>
	lcd_set_4bit();
    28b4:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    28b8:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
	init();
    28bc:	0e 94 be 12 	call	0x257c	; 0x257c <init>
	//set the destination in the path array
	next_dest[0]=7;
    28c0:	87 e0       	ldi	r24, 0x07	; 7
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	90 93 66 03 	sts	0x0366, r25
    28c8:	80 93 65 03 	sts	0x0365, r24
	next_dest[1]=2;
    28cc:	82 e0       	ldi	r24, 0x02	; 2
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	90 93 68 03 	sts	0x0368, r25
    28d4:	80 93 67 03 	sts	0x0367, r24
	next_dest[2]=4;
    28d8:	84 e0       	ldi	r24, 0x04	; 4
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	90 93 6a 03 	sts	0x036A, r25
    28e0:	80 93 69 03 	sts	0x0369, r24
	pres_off=-1;
    28e4:	8f ef       	ldi	r24, 0xFF	; 255
    28e6:	9f ef       	ldi	r25, 0xFF	; 255
    28e8:	90 93 6c 06 	sts	0x066C, r25
    28ec:	80 93 6b 06 	sts	0x066B, r24
	path_off=-1;
    28f0:	8f ef       	ldi	r24, 0xFF	; 255
    28f2:	9f ef       	ldi	r25, 0xFF	; 255
    28f4:	90 93 b3 05 	sts	0x05B3, r25
    28f8:	80 93 b2 05 	sts	0x05B2, r24
	off_d=3;
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	90 93 7f 06 	sts	0x067F, r25
    2904:	80 93 7e 06 	sts	0x067E, r24
	off=0;
    2908:	10 92 87 06 	sts	0x0687, r1
    290c:	10 92 86 06 	sts	0x0686, r1
	back=0;
    2910:	10 92 91 04 	sts	0x0491, r1

	x_pres =0, x_dest=0, y_pres =0,y_dest=0;
    2914:	10 92 4b 03 	sts	0x034B, r1
    2918:	10 92 4a 03 	sts	0x034A, r1
    291c:	10 92 4f 03 	sts	0x034F, r1
    2920:	10 92 4e 03 	sts	0x034E, r1
    2924:	10 92 4d 03 	sts	0x034D, r1
    2928:	10 92 4c 03 	sts	0x034C, r1
    292c:	10 92 51 03 	sts	0x0351, r1
    2930:	10 92 50 03 	sts	0x0350, r1
	
}
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <main>:
int main()
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	a8 97       	sbiw	r28, 0x28	; 40
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
	initAll();
    294e:	0e 94 42 14 	call	0x2884	; 0x2884 <initAll>
	data='1';
    2952:	81 e3       	ldi	r24, 0x31	; 49
    2954:	80 93 7d 06 	sts	0x067D, r24
	char val[10];
	while(1)
	{
		
		if(read_inp){
    2958:	80 91 61 03 	lds	r24, 0x0361
    295c:	90 91 62 03 	lds	r25, 0x0362
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	31 f0       	breq	.+12     	; 0x2970 <main+0x36>
			bluetooth();
    2964:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <bluetooth>
			lcd_string("working");
    2968:	83 e3       	ldi	r24, 0x33	; 51
    296a:	92 e0       	ldi	r25, 0x02	; 2
    296c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>

		}
		lcd_cursor(1,5);
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	65 e0       	ldi	r22, 0x05	; 5
    2974:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
		lcd_wr_char(data);
    2978:	80 91 7d 06 	lds	r24, 0x067D
    297c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	aa e7       	ldi	r26, 0x7A	; 122
    2986:	b4 e4       	ldi	r27, 0x44	; 68
    2988:	89 8f       	std	Y+25, r24	; 0x19
    298a:	9a 8f       	std	Y+26, r25	; 0x1a
    298c:	ab 8f       	std	Y+27, r26	; 0x1b
    298e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2990:	69 8d       	ldd	r22, Y+25	; 0x19
    2992:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2994:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2996:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2998:	26 e6       	ldi	r18, 0x66	; 102
    299a:	3e e4       	ldi	r19, 0x4E	; 78
    299c:	43 e6       	ldi	r20, 0x63	; 99
    299e:	55 e4       	ldi	r21, 0x45	; 69
    29a0:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	8d 8b       	std	Y+21, r24	; 0x15
    29aa:	9e 8b       	std	Y+22, r25	; 0x16
    29ac:	af 8b       	std	Y+23, r26	; 0x17
    29ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29b0:	6d 89       	ldd	r22, Y+21	; 0x15
    29b2:	7e 89       	ldd	r23, Y+22	; 0x16
    29b4:	8f 89       	ldd	r24, Y+23	; 0x17
    29b6:	98 8d       	ldd	r25, Y+24	; 0x18
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e8       	ldi	r20, 0x80	; 128
    29be:	5f e3       	ldi	r21, 0x3F	; 63
    29c0:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
    29c4:	88 23       	and	r24, r24
    29c6:	2c f4       	brge	.+10     	; 0x29d2 <main+0x98>
		__ticks = 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9c 8b       	std	Y+20, r25	; 0x14
    29ce:	8b 8b       	std	Y+19, r24	; 0x13
    29d0:	3f c0       	rjmp	.+126    	; 0x2a50 <main+0x116>
	else if (__tmp > 65535)
    29d2:	6d 89       	ldd	r22, Y+21	; 0x15
    29d4:	7e 89       	ldd	r23, Y+22	; 0x16
    29d6:	8f 89       	ldd	r24, Y+23	; 0x17
    29d8:	98 8d       	ldd	r25, Y+24	; 0x18
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	3f ef       	ldi	r19, 0xFF	; 255
    29de:	4f e7       	ldi	r20, 0x7F	; 127
    29e0:	57 e4       	ldi	r21, 0x47	; 71
    29e2:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
    29e6:	18 16       	cp	r1, r24
    29e8:	4c f5       	brge	.+82     	; 0x2a3c <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ea:	69 8d       	ldd	r22, Y+25	; 0x19
    29ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e2       	ldi	r20, 0x20	; 32
    29f8:	51 e4       	ldi	r21, 0x41	; 65
    29fa:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9c 8b       	std	Y+20, r25	; 0x14
    2a10:	8b 8b       	std	Y+19, r24	; 0x13
    2a12:	0f c0       	rjmp	.+30     	; 0x2a32 <main+0xf8>
    2a14:	8b e6       	ldi	r24, 0x6B	; 107
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	9a 8b       	std	Y+18, r25	; 0x12
    2a1a:	89 8b       	std	Y+17, r24	; 0x11
    2a1c:	89 89       	ldd	r24, Y+17	; 0x11
    2a1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <main+0xe6>
    2a24:	9a 8b       	std	Y+18, r25	; 0x12
    2a26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a28:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	9c 8b       	std	Y+20, r25	; 0x14
    2a30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	8b 89       	ldd	r24, Y+19	; 0x13
    2a34:	9c 89       	ldd	r25, Y+20	; 0x14
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	69 f7       	brne	.-38     	; 0x2a14 <main+0xda>
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a40:	8f 89       	ldd	r24, Y+23	; 0x17
    2a42:	98 8d       	ldd	r25, Y+24	; 0x18
    2a44:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9c 8b       	std	Y+20, r25	; 0x14
    2a4e:	8b 8b       	std	Y+19, r24	; 0x13
    2a50:	8b 89       	ldd	r24, Y+19	; 0x13
    2a52:	9c 89       	ldd	r25, Y+20	; 0x14
    2a54:	98 8b       	std	Y+16, r25	; 0x10
    2a56:	8f 87       	std	Y+15, r24	; 0x0f
    2a58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a5a:	98 89       	ldd	r25, Y+16	; 0x10
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <main+0x122>
    2a60:	98 8b       	std	Y+16, r25	; 0x10
    2a62:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		lcd_cursor(1,5);
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	65 e0       	ldi	r22, 0x05	; 5
    2a68:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
		lcd_wr_char('0');
    2a6c:	80 e3       	ldi	r24, 0x30	; 48
    2a6e:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	aa e7       	ldi	r26, 0x7A	; 122
    2a78:	b4 e4       	ldi	r27, 0x44	; 68
    2a7a:	8b 87       	std	Y+11, r24	; 0x0b
    2a7c:	9c 87       	std	Y+12, r25	; 0x0c
    2a7e:	ad 87       	std	Y+13, r26	; 0x0d
    2a80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8a:	26 e6       	ldi	r18, 0x66	; 102
    2a8c:	3e e4       	ldi	r19, 0x4E	; 78
    2a8e:	43 e6       	ldi	r20, 0x63	; 99
    2a90:	55 e4       	ldi	r21, 0x45	; 69
    2a92:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	8f 83       	std	Y+7, r24	; 0x07
    2a9c:	98 87       	std	Y+8, r25	; 0x08
    2a9e:	a9 87       	std	Y+9, r26	; 0x09
    2aa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa4:	78 85       	ldd	r23, Y+8	; 0x08
    2aa6:	89 85       	ldd	r24, Y+9	; 0x09
    2aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	2c f4       	brge	.+10     	; 0x2ac4 <main+0x18a>
		__ticks = 1;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <main+0x208>
	else if (__tmp > 65535)
    2ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac6:	78 85       	ldd	r23, Y+8	; 0x08
    2ac8:	89 85       	ldd	r24, Y+9	; 0x09
    2aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 88 18 	call	0x3110	; 0x3110 <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	4c f5       	brge	.+82     	; 0x2b2e <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	51 e4       	ldi	r21, 0x41	; 65
    2aec:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <main+0x1ea>
    2b06:	8b e6       	ldi	r24, 0x6B	; 107
    2b08:	91 e0       	ldi	r25, 0x01	; 1
    2b0a:	9c 83       	std	Y+4, r25	; 0x04
    2b0c:	8b 83       	std	Y+3, r24	; 0x03
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	9c 81       	ldd	r25, Y+4	; 0x04
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <main+0x1d8>
    2b16:	9c 83       	std	Y+4, r25	; 0x04
    2b18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	9e 83       	std	Y+6, r25	; 0x06
    2b22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b24:	8d 81       	ldd	r24, Y+5	; 0x05
    2b26:	9e 81       	ldd	r25, Y+6	; 0x06
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <main+0x1cc>
    2b2c:	14 c0       	rjmp	.+40     	; 0x2b56 <main+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b30:	78 85       	ldd	r23, Y+8	; 0x08
    2b32:	89 85       	ldd	r24, Y+9	; 0x09
    2b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b36:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	9e 83       	std	Y+6, r25	; 0x06
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	9e 81       	ldd	r25, Y+6	; 0x06
    2b46:	9a 83       	std	Y+2, r25	; 0x02
    2b48:	89 83       	std	Y+1, r24	; 0x01
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <main+0x214>
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		if (data == 'F'){
    2b56:	80 91 7d 06 	lds	r24, 0x067D
    2b5a:	86 34       	cpi	r24, 0x46	; 70
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <main+0x226>
    2b5e:	fc ce       	rjmp	.-520    	; 0x2958 <main+0x1e>
			lcd_cursor(1,10);
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	6a e0       	ldi	r22, 0x0A	; 10
    2b64:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
			lcd_wr_char('9');
    2b68:	89 e3       	ldi	r24, 0x39	; 57
    2b6a:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
    2b6e:	f4 ce       	rjmp	.-536    	; 0x2958 <main+0x1e>

00002b70 <__fixunssfsi>:
    2b70:	ef 92       	push	r14
    2b72:	ff 92       	push	r15
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	7b 01       	movw	r14, r22
    2b7a:	8c 01       	movw	r16, r24
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e0       	ldi	r20, 0x00	; 0
    2b82:	5f e4       	ldi	r21, 0x4F	; 79
    2b84:	0e 94 b8 18 	call	0x3170	; 0x3170 <__gesf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	8c f0       	brlt	.+34     	; 0x2bae <__fixunssfsi+0x3e>
    2b8c:	c8 01       	movw	r24, r16
    2b8e:	b7 01       	movw	r22, r14
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	5f e4       	ldi	r21, 0x4F	; 79
    2b98:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__subsf3>
    2b9c:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fixsfsi>
    2ba0:	9b 01       	movw	r18, r22
    2ba2:	ac 01       	movw	r20, r24
    2ba4:	20 50       	subi	r18, 0x00	; 0
    2ba6:	30 40       	sbci	r19, 0x00	; 0
    2ba8:	40 40       	sbci	r20, 0x00	; 0
    2baa:	50 48       	sbci	r21, 0x80	; 128
    2bac:	06 c0       	rjmp	.+12     	; 0x2bba <__fixunssfsi+0x4a>
    2bae:	c8 01       	movw	r24, r16
    2bb0:	b7 01       	movw	r22, r14
    2bb2:	0e 94 76 19 	call	0x32ec	; 0x32ec <__fixsfsi>
    2bb6:	9b 01       	movw	r18, r22
    2bb8:	ac 01       	movw	r20, r24
    2bba:	b9 01       	movw	r22, r18
    2bbc:	ca 01       	movw	r24, r20
    2bbe:	1f 91       	pop	r17
    2bc0:	0f 91       	pop	r16
    2bc2:	ff 90       	pop	r15
    2bc4:	ef 90       	pop	r14
    2bc6:	08 95       	ret

00002bc8 <_fpadd_parts>:
    2bc8:	a0 e0       	ldi	r26, 0x00	; 0
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	ea ee       	ldi	r30, 0xEA	; 234
    2bce:	f5 e1       	ldi	r31, 0x15	; 21
    2bd0:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__prologue_saves__>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	2b 01       	movw	r4, r22
    2bd8:	fa 01       	movw	r30, r20
    2bda:	9c 91       	ld	r25, X
    2bdc:	92 30       	cpi	r25, 0x02	; 2
    2bde:	08 f4       	brcc	.+2      	; 0x2be2 <_fpadd_parts+0x1a>
    2be0:	39 c1       	rjmp	.+626    	; 0x2e54 <_fpadd_parts+0x28c>
    2be2:	eb 01       	movw	r28, r22
    2be4:	88 81       	ld	r24, Y
    2be6:	82 30       	cpi	r24, 0x02	; 2
    2be8:	08 f4       	brcc	.+2      	; 0x2bec <_fpadd_parts+0x24>
    2bea:	33 c1       	rjmp	.+614    	; 0x2e52 <_fpadd_parts+0x28a>
    2bec:	94 30       	cpi	r25, 0x04	; 4
    2bee:	69 f4       	brne	.+26     	; 0x2c0a <_fpadd_parts+0x42>
    2bf0:	84 30       	cpi	r24, 0x04	; 4
    2bf2:	09 f0       	breq	.+2      	; 0x2bf6 <_fpadd_parts+0x2e>
    2bf4:	2f c1       	rjmp	.+606    	; 0x2e54 <_fpadd_parts+0x28c>
    2bf6:	11 96       	adiw	r26, 0x01	; 1
    2bf8:	9c 91       	ld	r25, X
    2bfa:	11 97       	sbiw	r26, 0x01	; 1
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	98 17       	cp	r25, r24
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <_fpadd_parts+0x3c>
    2c02:	28 c1       	rjmp	.+592    	; 0x2e54 <_fpadd_parts+0x28c>
    2c04:	ab e3       	ldi	r26, 0x3B	; 59
    2c06:	b2 e0       	ldi	r27, 0x02	; 2
    2c08:	25 c1       	rjmp	.+586    	; 0x2e54 <_fpadd_parts+0x28c>
    2c0a:	84 30       	cpi	r24, 0x04	; 4
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <_fpadd_parts+0x48>
    2c0e:	21 c1       	rjmp	.+578    	; 0x2e52 <_fpadd_parts+0x28a>
    2c10:	82 30       	cpi	r24, 0x02	; 2
    2c12:	a9 f4       	brne	.+42     	; 0x2c3e <_fpadd_parts+0x76>
    2c14:	92 30       	cpi	r25, 0x02	; 2
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <_fpadd_parts+0x52>
    2c18:	1d c1       	rjmp	.+570    	; 0x2e54 <_fpadd_parts+0x28c>
    2c1a:	9a 01       	movw	r18, r20
    2c1c:	ad 01       	movw	r20, r26
    2c1e:	88 e0       	ldi	r24, 0x08	; 8
    2c20:	ea 01       	movw	r28, r20
    2c22:	09 90       	ld	r0, Y+
    2c24:	ae 01       	movw	r20, r28
    2c26:	e9 01       	movw	r28, r18
    2c28:	09 92       	st	Y+, r0
    2c2a:	9e 01       	movw	r18, r28
    2c2c:	81 50       	subi	r24, 0x01	; 1
    2c2e:	c1 f7       	brne	.-16     	; 0x2c20 <_fpadd_parts+0x58>
    2c30:	e2 01       	movw	r28, r4
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	11 96       	adiw	r26, 0x01	; 1
    2c36:	9c 91       	ld	r25, X
    2c38:	89 23       	and	r24, r25
    2c3a:	81 83       	std	Z+1, r24	; 0x01
    2c3c:	08 c1       	rjmp	.+528    	; 0x2e4e <_fpadd_parts+0x286>
    2c3e:	92 30       	cpi	r25, 0x02	; 2
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <_fpadd_parts+0x7c>
    2c42:	07 c1       	rjmp	.+526    	; 0x2e52 <_fpadd_parts+0x28a>
    2c44:	12 96       	adiw	r26, 0x02	; 2
    2c46:	2d 90       	ld	r2, X+
    2c48:	3c 90       	ld	r3, X
    2c4a:	13 97       	sbiw	r26, 0x03	; 3
    2c4c:	eb 01       	movw	r28, r22
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	14 96       	adiw	r26, 0x04	; 4
    2c54:	ad 90       	ld	r10, X+
    2c56:	bd 90       	ld	r11, X+
    2c58:	cd 90       	ld	r12, X+
    2c5a:	dc 90       	ld	r13, X
    2c5c:	17 97       	sbiw	r26, 0x07	; 7
    2c5e:	ec 80       	ldd	r14, Y+4	; 0x04
    2c60:	fd 80       	ldd	r15, Y+5	; 0x05
    2c62:	0e 81       	ldd	r16, Y+6	; 0x06
    2c64:	1f 81       	ldd	r17, Y+7	; 0x07
    2c66:	91 01       	movw	r18, r2
    2c68:	28 1b       	sub	r18, r24
    2c6a:	39 0b       	sbc	r19, r25
    2c6c:	b9 01       	movw	r22, r18
    2c6e:	37 ff       	sbrs	r19, 7
    2c70:	04 c0       	rjmp	.+8      	; 0x2c7a <_fpadd_parts+0xb2>
    2c72:	66 27       	eor	r22, r22
    2c74:	77 27       	eor	r23, r23
    2c76:	62 1b       	sub	r22, r18
    2c78:	73 0b       	sbc	r23, r19
    2c7a:	60 32       	cpi	r22, 0x20	; 32
    2c7c:	71 05       	cpc	r23, r1
    2c7e:	0c f0       	brlt	.+2      	; 0x2c82 <_fpadd_parts+0xba>
    2c80:	61 c0       	rjmp	.+194    	; 0x2d44 <_fpadd_parts+0x17c>
    2c82:	12 16       	cp	r1, r18
    2c84:	13 06       	cpc	r1, r19
    2c86:	6c f5       	brge	.+90     	; 0x2ce2 <_fpadd_parts+0x11a>
    2c88:	37 01       	movw	r6, r14
    2c8a:	48 01       	movw	r8, r16
    2c8c:	06 2e       	mov	r0, r22
    2c8e:	04 c0       	rjmp	.+8      	; 0x2c98 <_fpadd_parts+0xd0>
    2c90:	96 94       	lsr	r9
    2c92:	87 94       	ror	r8
    2c94:	77 94       	ror	r7
    2c96:	67 94       	ror	r6
    2c98:	0a 94       	dec	r0
    2c9a:	d2 f7       	brpl	.-12     	; 0x2c90 <_fpadd_parts+0xc8>
    2c9c:	21 e0       	ldi	r18, 0x01	; 1
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	50 e0       	ldi	r21, 0x00	; 0
    2ca4:	04 c0       	rjmp	.+8      	; 0x2cae <_fpadd_parts+0xe6>
    2ca6:	22 0f       	add	r18, r18
    2ca8:	33 1f       	adc	r19, r19
    2caa:	44 1f       	adc	r20, r20
    2cac:	55 1f       	adc	r21, r21
    2cae:	6a 95       	dec	r22
    2cb0:	d2 f7       	brpl	.-12     	; 0x2ca6 <_fpadd_parts+0xde>
    2cb2:	21 50       	subi	r18, 0x01	; 1
    2cb4:	30 40       	sbci	r19, 0x00	; 0
    2cb6:	40 40       	sbci	r20, 0x00	; 0
    2cb8:	50 40       	sbci	r21, 0x00	; 0
    2cba:	2e 21       	and	r18, r14
    2cbc:	3f 21       	and	r19, r15
    2cbe:	40 23       	and	r20, r16
    2cc0:	51 23       	and	r21, r17
    2cc2:	21 15       	cp	r18, r1
    2cc4:	31 05       	cpc	r19, r1
    2cc6:	41 05       	cpc	r20, r1
    2cc8:	51 05       	cpc	r21, r1
    2cca:	21 f0       	breq	.+8      	; 0x2cd4 <_fpadd_parts+0x10c>
    2ccc:	21 e0       	ldi	r18, 0x01	; 1
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e0       	ldi	r20, 0x00	; 0
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	79 01       	movw	r14, r18
    2cd6:	8a 01       	movw	r16, r20
    2cd8:	e6 28       	or	r14, r6
    2cda:	f7 28       	or	r15, r7
    2cdc:	08 29       	or	r16, r8
    2cde:	19 29       	or	r17, r9
    2ce0:	3c c0       	rjmp	.+120    	; 0x2d5a <_fpadd_parts+0x192>
    2ce2:	23 2b       	or	r18, r19
    2ce4:	d1 f1       	breq	.+116    	; 0x2d5a <_fpadd_parts+0x192>
    2ce6:	26 0e       	add	r2, r22
    2ce8:	37 1e       	adc	r3, r23
    2cea:	35 01       	movw	r6, r10
    2cec:	46 01       	movw	r8, r12
    2cee:	06 2e       	mov	r0, r22
    2cf0:	04 c0       	rjmp	.+8      	; 0x2cfa <_fpadd_parts+0x132>
    2cf2:	96 94       	lsr	r9
    2cf4:	87 94       	ror	r8
    2cf6:	77 94       	ror	r7
    2cf8:	67 94       	ror	r6
    2cfa:	0a 94       	dec	r0
    2cfc:	d2 f7       	brpl	.-12     	; 0x2cf2 <_fpadd_parts+0x12a>
    2cfe:	21 e0       	ldi	r18, 0x01	; 1
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <_fpadd_parts+0x148>
    2d08:	22 0f       	add	r18, r18
    2d0a:	33 1f       	adc	r19, r19
    2d0c:	44 1f       	adc	r20, r20
    2d0e:	55 1f       	adc	r21, r21
    2d10:	6a 95       	dec	r22
    2d12:	d2 f7       	brpl	.-12     	; 0x2d08 <_fpadd_parts+0x140>
    2d14:	21 50       	subi	r18, 0x01	; 1
    2d16:	30 40       	sbci	r19, 0x00	; 0
    2d18:	40 40       	sbci	r20, 0x00	; 0
    2d1a:	50 40       	sbci	r21, 0x00	; 0
    2d1c:	2a 21       	and	r18, r10
    2d1e:	3b 21       	and	r19, r11
    2d20:	4c 21       	and	r20, r12
    2d22:	5d 21       	and	r21, r13
    2d24:	21 15       	cp	r18, r1
    2d26:	31 05       	cpc	r19, r1
    2d28:	41 05       	cpc	r20, r1
    2d2a:	51 05       	cpc	r21, r1
    2d2c:	21 f0       	breq	.+8      	; 0x2d36 <_fpadd_parts+0x16e>
    2d2e:	21 e0       	ldi	r18, 0x01	; 1
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e0       	ldi	r20, 0x00	; 0
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	59 01       	movw	r10, r18
    2d38:	6a 01       	movw	r12, r20
    2d3a:	a6 28       	or	r10, r6
    2d3c:	b7 28       	or	r11, r7
    2d3e:	c8 28       	or	r12, r8
    2d40:	d9 28       	or	r13, r9
    2d42:	0b c0       	rjmp	.+22     	; 0x2d5a <_fpadd_parts+0x192>
    2d44:	82 15       	cp	r24, r2
    2d46:	93 05       	cpc	r25, r3
    2d48:	2c f0       	brlt	.+10     	; 0x2d54 <_fpadd_parts+0x18c>
    2d4a:	1c 01       	movw	r2, r24
    2d4c:	aa 24       	eor	r10, r10
    2d4e:	bb 24       	eor	r11, r11
    2d50:	65 01       	movw	r12, r10
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <_fpadd_parts+0x192>
    2d54:	ee 24       	eor	r14, r14
    2d56:	ff 24       	eor	r15, r15
    2d58:	87 01       	movw	r16, r14
    2d5a:	11 96       	adiw	r26, 0x01	; 1
    2d5c:	9c 91       	ld	r25, X
    2d5e:	d2 01       	movw	r26, r4
    2d60:	11 96       	adiw	r26, 0x01	; 1
    2d62:	8c 91       	ld	r24, X
    2d64:	98 17       	cp	r25, r24
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <_fpadd_parts+0x1a2>
    2d68:	45 c0       	rjmp	.+138    	; 0x2df4 <_fpadd_parts+0x22c>
    2d6a:	99 23       	and	r25, r25
    2d6c:	39 f0       	breq	.+14     	; 0x2d7c <_fpadd_parts+0x1b4>
    2d6e:	a8 01       	movw	r20, r16
    2d70:	97 01       	movw	r18, r14
    2d72:	2a 19       	sub	r18, r10
    2d74:	3b 09       	sbc	r19, r11
    2d76:	4c 09       	sbc	r20, r12
    2d78:	5d 09       	sbc	r21, r13
    2d7a:	06 c0       	rjmp	.+12     	; 0x2d88 <_fpadd_parts+0x1c0>
    2d7c:	a6 01       	movw	r20, r12
    2d7e:	95 01       	movw	r18, r10
    2d80:	2e 19       	sub	r18, r14
    2d82:	3f 09       	sbc	r19, r15
    2d84:	40 0b       	sbc	r20, r16
    2d86:	51 0b       	sbc	r21, r17
    2d88:	57 fd       	sbrc	r21, 7
    2d8a:	08 c0       	rjmp	.+16     	; 0x2d9c <_fpadd_parts+0x1d4>
    2d8c:	11 82       	std	Z+1, r1	; 0x01
    2d8e:	33 82       	std	Z+3, r3	; 0x03
    2d90:	22 82       	std	Z+2, r2	; 0x02
    2d92:	24 83       	std	Z+4, r18	; 0x04
    2d94:	35 83       	std	Z+5, r19	; 0x05
    2d96:	46 83       	std	Z+6, r20	; 0x06
    2d98:	57 83       	std	Z+7, r21	; 0x07
    2d9a:	1d c0       	rjmp	.+58     	; 0x2dd6 <_fpadd_parts+0x20e>
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	81 83       	std	Z+1, r24	; 0x01
    2da0:	33 82       	std	Z+3, r3	; 0x03
    2da2:	22 82       	std	Z+2, r2	; 0x02
    2da4:	88 27       	eor	r24, r24
    2da6:	99 27       	eor	r25, r25
    2da8:	dc 01       	movw	r26, r24
    2daa:	82 1b       	sub	r24, r18
    2dac:	93 0b       	sbc	r25, r19
    2dae:	a4 0b       	sbc	r26, r20
    2db0:	b5 0b       	sbc	r27, r21
    2db2:	84 83       	std	Z+4, r24	; 0x04
    2db4:	95 83       	std	Z+5, r25	; 0x05
    2db6:	a6 83       	std	Z+6, r26	; 0x06
    2db8:	b7 83       	std	Z+7, r27	; 0x07
    2dba:	0d c0       	rjmp	.+26     	; 0x2dd6 <_fpadd_parts+0x20e>
    2dbc:	22 0f       	add	r18, r18
    2dbe:	33 1f       	adc	r19, r19
    2dc0:	44 1f       	adc	r20, r20
    2dc2:	55 1f       	adc	r21, r21
    2dc4:	24 83       	std	Z+4, r18	; 0x04
    2dc6:	35 83       	std	Z+5, r19	; 0x05
    2dc8:	46 83       	std	Z+6, r20	; 0x06
    2dca:	57 83       	std	Z+7, r21	; 0x07
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	93 83       	std	Z+3, r25	; 0x03
    2dd4:	82 83       	std	Z+2, r24	; 0x02
    2dd6:	24 81       	ldd	r18, Z+4	; 0x04
    2dd8:	35 81       	ldd	r19, Z+5	; 0x05
    2dda:	46 81       	ldd	r20, Z+6	; 0x06
    2ddc:	57 81       	ldd	r21, Z+7	; 0x07
    2dde:	da 01       	movw	r26, r20
    2de0:	c9 01       	movw	r24, r18
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	a1 09       	sbc	r26, r1
    2de6:	b1 09       	sbc	r27, r1
    2de8:	8f 5f       	subi	r24, 0xFF	; 255
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	af 4f       	sbci	r26, 0xFF	; 255
    2dee:	bf 43       	sbci	r27, 0x3F	; 63
    2df0:	28 f3       	brcs	.-54     	; 0x2dbc <_fpadd_parts+0x1f4>
    2df2:	0b c0       	rjmp	.+22     	; 0x2e0a <_fpadd_parts+0x242>
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	33 82       	std	Z+3, r3	; 0x03
    2df8:	22 82       	std	Z+2, r2	; 0x02
    2dfa:	ea 0c       	add	r14, r10
    2dfc:	fb 1c       	adc	r15, r11
    2dfe:	0c 1d       	adc	r16, r12
    2e00:	1d 1d       	adc	r17, r13
    2e02:	e4 82       	std	Z+4, r14	; 0x04
    2e04:	f5 82       	std	Z+5, r15	; 0x05
    2e06:	06 83       	std	Z+6, r16	; 0x06
    2e08:	17 83       	std	Z+7, r17	; 0x07
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	80 83       	st	Z, r24
    2e0e:	24 81       	ldd	r18, Z+4	; 0x04
    2e10:	35 81       	ldd	r19, Z+5	; 0x05
    2e12:	46 81       	ldd	r20, Z+6	; 0x06
    2e14:	57 81       	ldd	r21, Z+7	; 0x07
    2e16:	57 ff       	sbrs	r21, 7
    2e18:	1a c0       	rjmp	.+52     	; 0x2e4e <_fpadd_parts+0x286>
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	aa 27       	eor	r26, r26
    2e1e:	97 fd       	sbrc	r25, 7
    2e20:	a0 95       	com	r26
    2e22:	ba 2f       	mov	r27, r26
    2e24:	81 70       	andi	r24, 0x01	; 1
    2e26:	90 70       	andi	r25, 0x00	; 0
    2e28:	a0 70       	andi	r26, 0x00	; 0
    2e2a:	b0 70       	andi	r27, 0x00	; 0
    2e2c:	56 95       	lsr	r21
    2e2e:	47 95       	ror	r20
    2e30:	37 95       	ror	r19
    2e32:	27 95       	ror	r18
    2e34:	82 2b       	or	r24, r18
    2e36:	93 2b       	or	r25, r19
    2e38:	a4 2b       	or	r26, r20
    2e3a:	b5 2b       	or	r27, r21
    2e3c:	84 83       	std	Z+4, r24	; 0x04
    2e3e:	95 83       	std	Z+5, r25	; 0x05
    2e40:	a6 83       	std	Z+6, r26	; 0x06
    2e42:	b7 83       	std	Z+7, r27	; 0x07
    2e44:	82 81       	ldd	r24, Z+2	; 0x02
    2e46:	93 81       	ldd	r25, Z+3	; 0x03
    2e48:	01 96       	adiw	r24, 0x01	; 1
    2e4a:	93 83       	std	Z+3, r25	; 0x03
    2e4c:	82 83       	std	Z+2, r24	; 0x02
    2e4e:	df 01       	movw	r26, r30
    2e50:	01 c0       	rjmp	.+2      	; 0x2e54 <_fpadd_parts+0x28c>
    2e52:	d2 01       	movw	r26, r4
    2e54:	cd 01       	movw	r24, r26
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	e2 e1       	ldi	r30, 0x12	; 18
    2e5c:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__epilogue_restores__>

00002e60 <__subsf3>:
    2e60:	a0 e2       	ldi	r26, 0x20	; 32
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e6 e3       	ldi	r30, 0x36	; 54
    2e66:	f7 e1       	ldi	r31, 0x17	; 23
    2e68:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
    2e6c:	69 83       	std	Y+1, r22	; 0x01
    2e6e:	7a 83       	std	Y+2, r23	; 0x02
    2e70:	8b 83       	std	Y+3, r24	; 0x03
    2e72:	9c 83       	std	Y+4, r25	; 0x04
    2e74:	2d 83       	std	Y+5, r18	; 0x05
    2e76:	3e 83       	std	Y+6, r19	; 0x06
    2e78:	4f 83       	std	Y+7, r20	; 0x07
    2e7a:	58 87       	std	Y+8, r21	; 0x08
    2e7c:	e9 e0       	ldi	r30, 0x09	; 9
    2e7e:	ee 2e       	mov	r14, r30
    2e80:	f1 2c       	mov	r15, r1
    2e82:	ec 0e       	add	r14, r28
    2e84:	fd 1e       	adc	r15, r29
    2e86:	ce 01       	movw	r24, r28
    2e88:	01 96       	adiw	r24, 0x01	; 1
    2e8a:	b7 01       	movw	r22, r14
    2e8c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2e90:	8e 01       	movw	r16, r28
    2e92:	0f 5e       	subi	r16, 0xEF	; 239
    2e94:	1f 4f       	sbci	r17, 0xFF	; 255
    2e96:	ce 01       	movw	r24, r28
    2e98:	05 96       	adiw	r24, 0x05	; 5
    2e9a:	b8 01       	movw	r22, r16
    2e9c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2ea0:	8a 89       	ldd	r24, Y+18	; 0x12
    2ea2:	91 e0       	ldi	r25, 0x01	; 1
    2ea4:	89 27       	eor	r24, r25
    2ea6:	8a 8b       	std	Y+18, r24	; 0x12
    2ea8:	c7 01       	movw	r24, r14
    2eaa:	b8 01       	movw	r22, r16
    2eac:	ae 01       	movw	r20, r28
    2eae:	47 5e       	subi	r20, 0xE7	; 231
    2eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <_fpadd_parts>
    2eb6:	0e 94 19 1a 	call	0x3432	; 0x3432 <__pack_f>
    2eba:	a0 96       	adiw	r28, 0x20	; 32
    2ebc:	e6 e0       	ldi	r30, 0x06	; 6
    2ebe:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

00002ec2 <__addsf3>:
    2ec2:	a0 e2       	ldi	r26, 0x20	; 32
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e7 e6       	ldi	r30, 0x67	; 103
    2ec8:	f7 e1       	ldi	r31, 0x17	; 23
    2eca:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
    2ece:	69 83       	std	Y+1, r22	; 0x01
    2ed0:	7a 83       	std	Y+2, r23	; 0x02
    2ed2:	8b 83       	std	Y+3, r24	; 0x03
    2ed4:	9c 83       	std	Y+4, r25	; 0x04
    2ed6:	2d 83       	std	Y+5, r18	; 0x05
    2ed8:	3e 83       	std	Y+6, r19	; 0x06
    2eda:	4f 83       	std	Y+7, r20	; 0x07
    2edc:	58 87       	std	Y+8, r21	; 0x08
    2ede:	f9 e0       	ldi	r31, 0x09	; 9
    2ee0:	ef 2e       	mov	r14, r31
    2ee2:	f1 2c       	mov	r15, r1
    2ee4:	ec 0e       	add	r14, r28
    2ee6:	fd 1e       	adc	r15, r29
    2ee8:	ce 01       	movw	r24, r28
    2eea:	01 96       	adiw	r24, 0x01	; 1
    2eec:	b7 01       	movw	r22, r14
    2eee:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2ef2:	8e 01       	movw	r16, r28
    2ef4:	0f 5e       	subi	r16, 0xEF	; 239
    2ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef8:	ce 01       	movw	r24, r28
    2efa:	05 96       	adiw	r24, 0x05	; 5
    2efc:	b8 01       	movw	r22, r16
    2efe:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2f02:	c7 01       	movw	r24, r14
    2f04:	b8 01       	movw	r22, r16
    2f06:	ae 01       	movw	r20, r28
    2f08:	47 5e       	subi	r20, 0xE7	; 231
    2f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <_fpadd_parts>
    2f10:	0e 94 19 1a 	call	0x3432	; 0x3432 <__pack_f>
    2f14:	a0 96       	adiw	r28, 0x20	; 32
    2f16:	e6 e0       	ldi	r30, 0x06	; 6
    2f18:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

00002f1c <__mulsf3>:
    2f1c:	a0 e2       	ldi	r26, 0x20	; 32
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e4 e9       	ldi	r30, 0x94	; 148
    2f22:	f7 e1       	ldi	r31, 0x17	; 23
    2f24:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <__prologue_saves__>
    2f28:	69 83       	std	Y+1, r22	; 0x01
    2f2a:	7a 83       	std	Y+2, r23	; 0x02
    2f2c:	8b 83       	std	Y+3, r24	; 0x03
    2f2e:	9c 83       	std	Y+4, r25	; 0x04
    2f30:	2d 83       	std	Y+5, r18	; 0x05
    2f32:	3e 83       	std	Y+6, r19	; 0x06
    2f34:	4f 83       	std	Y+7, r20	; 0x07
    2f36:	58 87       	std	Y+8, r21	; 0x08
    2f38:	ce 01       	movw	r24, r28
    2f3a:	01 96       	adiw	r24, 0x01	; 1
    2f3c:	be 01       	movw	r22, r28
    2f3e:	67 5f       	subi	r22, 0xF7	; 247
    2f40:	7f 4f       	sbci	r23, 0xFF	; 255
    2f42:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2f46:	ce 01       	movw	r24, r28
    2f48:	05 96       	adiw	r24, 0x05	; 5
    2f4a:	be 01       	movw	r22, r28
    2f4c:	6f 5e       	subi	r22, 0xEF	; 239
    2f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f50:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2f54:	99 85       	ldd	r25, Y+9	; 0x09
    2f56:	92 30       	cpi	r25, 0x02	; 2
    2f58:	88 f0       	brcs	.+34     	; 0x2f7c <__mulsf3+0x60>
    2f5a:	89 89       	ldd	r24, Y+17	; 0x11
    2f5c:	82 30       	cpi	r24, 0x02	; 2
    2f5e:	c8 f0       	brcs	.+50     	; 0x2f92 <__mulsf3+0x76>
    2f60:	94 30       	cpi	r25, 0x04	; 4
    2f62:	19 f4       	brne	.+6      	; 0x2f6a <__mulsf3+0x4e>
    2f64:	82 30       	cpi	r24, 0x02	; 2
    2f66:	51 f4       	brne	.+20     	; 0x2f7c <__mulsf3+0x60>
    2f68:	04 c0       	rjmp	.+8      	; 0x2f72 <__mulsf3+0x56>
    2f6a:	84 30       	cpi	r24, 0x04	; 4
    2f6c:	29 f4       	brne	.+10     	; 0x2f78 <__mulsf3+0x5c>
    2f6e:	92 30       	cpi	r25, 0x02	; 2
    2f70:	81 f4       	brne	.+32     	; 0x2f92 <__mulsf3+0x76>
    2f72:	8b e3       	ldi	r24, 0x3B	; 59
    2f74:	92 e0       	ldi	r25, 0x02	; 2
    2f76:	c6 c0       	rjmp	.+396    	; 0x3104 <__mulsf3+0x1e8>
    2f78:	92 30       	cpi	r25, 0x02	; 2
    2f7a:	49 f4       	brne	.+18     	; 0x2f8e <__mulsf3+0x72>
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	8a 89       	ldd	r24, Y+18	; 0x12
    2f82:	98 13       	cpse	r25, r24
    2f84:	21 e0       	ldi	r18, 0x01	; 1
    2f86:	2a 87       	std	Y+10, r18	; 0x0a
    2f88:	ce 01       	movw	r24, r28
    2f8a:	09 96       	adiw	r24, 0x09	; 9
    2f8c:	bb c0       	rjmp	.+374    	; 0x3104 <__mulsf3+0x1e8>
    2f8e:	82 30       	cpi	r24, 0x02	; 2
    2f90:	49 f4       	brne	.+18     	; 0x2fa4 <__mulsf3+0x88>
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f96:	8a 89       	ldd	r24, Y+18	; 0x12
    2f98:	98 13       	cpse	r25, r24
    2f9a:	21 e0       	ldi	r18, 0x01	; 1
    2f9c:	2a 8b       	std	Y+18, r18	; 0x12
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	41 96       	adiw	r24, 0x11	; 17
    2fa2:	b0 c0       	rjmp	.+352    	; 0x3104 <__mulsf3+0x1e8>
    2fa4:	2d 84       	ldd	r2, Y+13	; 0x0d
    2fa6:	3e 84       	ldd	r3, Y+14	; 0x0e
    2fa8:	4f 84       	ldd	r4, Y+15	; 0x0f
    2faa:	58 88       	ldd	r5, Y+16	; 0x10
    2fac:	6d 88       	ldd	r6, Y+21	; 0x15
    2fae:	7e 88       	ldd	r7, Y+22	; 0x16
    2fb0:	8f 88       	ldd	r8, Y+23	; 0x17
    2fb2:	98 8c       	ldd	r9, Y+24	; 0x18
    2fb4:	ee 24       	eor	r14, r14
    2fb6:	ff 24       	eor	r15, r15
    2fb8:	87 01       	movw	r16, r14
    2fba:	aa 24       	eor	r10, r10
    2fbc:	bb 24       	eor	r11, r11
    2fbe:	65 01       	movw	r12, r10
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	e0 e0       	ldi	r30, 0x00	; 0
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	c1 01       	movw	r24, r2
    2fce:	81 70       	andi	r24, 0x01	; 1
    2fd0:	90 70       	andi	r25, 0x00	; 0
    2fd2:	89 2b       	or	r24, r25
    2fd4:	e9 f0       	breq	.+58     	; 0x3010 <__mulsf3+0xf4>
    2fd6:	e6 0c       	add	r14, r6
    2fd8:	f7 1c       	adc	r15, r7
    2fda:	08 1d       	adc	r16, r8
    2fdc:	19 1d       	adc	r17, r9
    2fde:	9a 01       	movw	r18, r20
    2fe0:	ab 01       	movw	r20, r22
    2fe2:	2a 0d       	add	r18, r10
    2fe4:	3b 1d       	adc	r19, r11
    2fe6:	4c 1d       	adc	r20, r12
    2fe8:	5d 1d       	adc	r21, r13
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e0       	ldi	r26, 0x00	; 0
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	e6 14       	cp	r14, r6
    2ff4:	f7 04       	cpc	r15, r7
    2ff6:	08 05       	cpc	r16, r8
    2ff8:	19 05       	cpc	r17, r9
    2ffa:	20 f4       	brcc	.+8      	; 0x3004 <__mulsf3+0xe8>
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	a0 e0       	ldi	r26, 0x00	; 0
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	ba 01       	movw	r22, r20
    3006:	a9 01       	movw	r20, r18
    3008:	48 0f       	add	r20, r24
    300a:	59 1f       	adc	r21, r25
    300c:	6a 1f       	adc	r22, r26
    300e:	7b 1f       	adc	r23, r27
    3010:	aa 0c       	add	r10, r10
    3012:	bb 1c       	adc	r11, r11
    3014:	cc 1c       	adc	r12, r12
    3016:	dd 1c       	adc	r13, r13
    3018:	97 fe       	sbrs	r9, 7
    301a:	08 c0       	rjmp	.+16     	; 0x302c <__mulsf3+0x110>
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	a0 e0       	ldi	r26, 0x00	; 0
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	a8 2a       	or	r10, r24
    3026:	b9 2a       	or	r11, r25
    3028:	ca 2a       	or	r12, r26
    302a:	db 2a       	or	r13, r27
    302c:	31 96       	adiw	r30, 0x01	; 1
    302e:	e0 32       	cpi	r30, 0x20	; 32
    3030:	f1 05       	cpc	r31, r1
    3032:	49 f0       	breq	.+18     	; 0x3046 <__mulsf3+0x12a>
    3034:	66 0c       	add	r6, r6
    3036:	77 1c       	adc	r7, r7
    3038:	88 1c       	adc	r8, r8
    303a:	99 1c       	adc	r9, r9
    303c:	56 94       	lsr	r5
    303e:	47 94       	ror	r4
    3040:	37 94       	ror	r3
    3042:	27 94       	ror	r2
    3044:	c3 cf       	rjmp	.-122    	; 0x2fcc <__mulsf3+0xb0>
    3046:	fa 85       	ldd	r31, Y+10	; 0x0a
    3048:	ea 89       	ldd	r30, Y+18	; 0x12
    304a:	2b 89       	ldd	r18, Y+19	; 0x13
    304c:	3c 89       	ldd	r19, Y+20	; 0x14
    304e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3050:	9c 85       	ldd	r25, Y+12	; 0x0c
    3052:	28 0f       	add	r18, r24
    3054:	39 1f       	adc	r19, r25
    3056:	2e 5f       	subi	r18, 0xFE	; 254
    3058:	3f 4f       	sbci	r19, 0xFF	; 255
    305a:	17 c0       	rjmp	.+46     	; 0x308a <__mulsf3+0x16e>
    305c:	ca 01       	movw	r24, r20
    305e:	81 70       	andi	r24, 0x01	; 1
    3060:	90 70       	andi	r25, 0x00	; 0
    3062:	89 2b       	or	r24, r25
    3064:	61 f0       	breq	.+24     	; 0x307e <__mulsf3+0x162>
    3066:	16 95       	lsr	r17
    3068:	07 95       	ror	r16
    306a:	f7 94       	ror	r15
    306c:	e7 94       	ror	r14
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	a0 e0       	ldi	r26, 0x00	; 0
    3074:	b0 e8       	ldi	r27, 0x80	; 128
    3076:	e8 2a       	or	r14, r24
    3078:	f9 2a       	or	r15, r25
    307a:	0a 2b       	or	r16, r26
    307c:	1b 2b       	or	r17, r27
    307e:	76 95       	lsr	r23
    3080:	67 95       	ror	r22
    3082:	57 95       	ror	r21
    3084:	47 95       	ror	r20
    3086:	2f 5f       	subi	r18, 0xFF	; 255
    3088:	3f 4f       	sbci	r19, 0xFF	; 255
    308a:	77 fd       	sbrc	r23, 7
    308c:	e7 cf       	rjmp	.-50     	; 0x305c <__mulsf3+0x140>
    308e:	0c c0       	rjmp	.+24     	; 0x30a8 <__mulsf3+0x18c>
    3090:	44 0f       	add	r20, r20
    3092:	55 1f       	adc	r21, r21
    3094:	66 1f       	adc	r22, r22
    3096:	77 1f       	adc	r23, r23
    3098:	17 fd       	sbrc	r17, 7
    309a:	41 60       	ori	r20, 0x01	; 1
    309c:	ee 0c       	add	r14, r14
    309e:	ff 1c       	adc	r15, r15
    30a0:	00 1f       	adc	r16, r16
    30a2:	11 1f       	adc	r17, r17
    30a4:	21 50       	subi	r18, 0x01	; 1
    30a6:	30 40       	sbci	r19, 0x00	; 0
    30a8:	40 30       	cpi	r20, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	59 07       	cpc	r21, r25
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	69 07       	cpc	r22, r25
    30b2:	90 e4       	ldi	r25, 0x40	; 64
    30b4:	79 07       	cpc	r23, r25
    30b6:	60 f3       	brcs	.-40     	; 0x3090 <__mulsf3+0x174>
    30b8:	2b 8f       	std	Y+27, r18	; 0x1b
    30ba:	3c 8f       	std	Y+28, r19	; 0x1c
    30bc:	db 01       	movw	r26, r22
    30be:	ca 01       	movw	r24, r20
    30c0:	8f 77       	andi	r24, 0x7F	; 127
    30c2:	90 70       	andi	r25, 0x00	; 0
    30c4:	a0 70       	andi	r26, 0x00	; 0
    30c6:	b0 70       	andi	r27, 0x00	; 0
    30c8:	80 34       	cpi	r24, 0x40	; 64
    30ca:	91 05       	cpc	r25, r1
    30cc:	a1 05       	cpc	r26, r1
    30ce:	b1 05       	cpc	r27, r1
    30d0:	61 f4       	brne	.+24     	; 0x30ea <__mulsf3+0x1ce>
    30d2:	47 fd       	sbrc	r20, 7
    30d4:	0a c0       	rjmp	.+20     	; 0x30ea <__mulsf3+0x1ce>
    30d6:	e1 14       	cp	r14, r1
    30d8:	f1 04       	cpc	r15, r1
    30da:	01 05       	cpc	r16, r1
    30dc:	11 05       	cpc	r17, r1
    30de:	29 f0       	breq	.+10     	; 0x30ea <__mulsf3+0x1ce>
    30e0:	40 5c       	subi	r20, 0xC0	; 192
    30e2:	5f 4f       	sbci	r21, 0xFF	; 255
    30e4:	6f 4f       	sbci	r22, 0xFF	; 255
    30e6:	7f 4f       	sbci	r23, 0xFF	; 255
    30e8:	40 78       	andi	r20, 0x80	; 128
    30ea:	1a 8e       	std	Y+26, r1	; 0x1a
    30ec:	fe 17       	cp	r31, r30
    30ee:	11 f0       	breq	.+4      	; 0x30f4 <__mulsf3+0x1d8>
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	8a 8f       	std	Y+26, r24	; 0x1a
    30f4:	4d 8f       	std	Y+29, r20	; 0x1d
    30f6:	5e 8f       	std	Y+30, r21	; 0x1e
    30f8:	6f 8f       	std	Y+31, r22	; 0x1f
    30fa:	78 a3       	std	Y+32, r23	; 0x20
    30fc:	83 e0       	ldi	r24, 0x03	; 3
    30fe:	89 8f       	std	Y+25, r24	; 0x19
    3100:	ce 01       	movw	r24, r28
    3102:	49 96       	adiw	r24, 0x19	; 25
    3104:	0e 94 19 1a 	call	0x3432	; 0x3432 <__pack_f>
    3108:	a0 96       	adiw	r28, 0x20	; 32
    310a:	e2 e1       	ldi	r30, 0x12	; 18
    310c:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__epilogue_restores__>

00003110 <__gtsf2>:
    3110:	a8 e1       	ldi	r26, 0x18	; 24
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	ee e8       	ldi	r30, 0x8E	; 142
    3116:	f8 e1       	ldi	r31, 0x18	; 24
    3118:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
    311c:	69 83       	std	Y+1, r22	; 0x01
    311e:	7a 83       	std	Y+2, r23	; 0x02
    3120:	8b 83       	std	Y+3, r24	; 0x03
    3122:	9c 83       	std	Y+4, r25	; 0x04
    3124:	2d 83       	std	Y+5, r18	; 0x05
    3126:	3e 83       	std	Y+6, r19	; 0x06
    3128:	4f 83       	std	Y+7, r20	; 0x07
    312a:	58 87       	std	Y+8, r21	; 0x08
    312c:	89 e0       	ldi	r24, 0x09	; 9
    312e:	e8 2e       	mov	r14, r24
    3130:	f1 2c       	mov	r15, r1
    3132:	ec 0e       	add	r14, r28
    3134:	fd 1e       	adc	r15, r29
    3136:	ce 01       	movw	r24, r28
    3138:	01 96       	adiw	r24, 0x01	; 1
    313a:	b7 01       	movw	r22, r14
    313c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    3140:	8e 01       	movw	r16, r28
    3142:	0f 5e       	subi	r16, 0xEF	; 239
    3144:	1f 4f       	sbci	r17, 0xFF	; 255
    3146:	ce 01       	movw	r24, r28
    3148:	05 96       	adiw	r24, 0x05	; 5
    314a:	b8 01       	movw	r22, r16
    314c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	82 30       	cpi	r24, 0x02	; 2
    3154:	40 f0       	brcs	.+16     	; 0x3166 <__gtsf2+0x56>
    3156:	89 89       	ldd	r24, Y+17	; 0x11
    3158:	82 30       	cpi	r24, 0x02	; 2
    315a:	28 f0       	brcs	.+10     	; 0x3166 <__gtsf2+0x56>
    315c:	c7 01       	movw	r24, r14
    315e:	b8 01       	movw	r22, r16
    3160:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__fpcmp_parts_f>
    3164:	01 c0       	rjmp	.+2      	; 0x3168 <__gtsf2+0x58>
    3166:	8f ef       	ldi	r24, 0xFF	; 255
    3168:	68 96       	adiw	r28, 0x18	; 24
    316a:	e6 e0       	ldi	r30, 0x06	; 6
    316c:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

00003170 <__gesf2>:
    3170:	a8 e1       	ldi	r26, 0x18	; 24
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	ee eb       	ldi	r30, 0xBE	; 190
    3176:	f8 e1       	ldi	r31, 0x18	; 24
    3178:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
    317c:	69 83       	std	Y+1, r22	; 0x01
    317e:	7a 83       	std	Y+2, r23	; 0x02
    3180:	8b 83       	std	Y+3, r24	; 0x03
    3182:	9c 83       	std	Y+4, r25	; 0x04
    3184:	2d 83       	std	Y+5, r18	; 0x05
    3186:	3e 83       	std	Y+6, r19	; 0x06
    3188:	4f 83       	std	Y+7, r20	; 0x07
    318a:	58 87       	std	Y+8, r21	; 0x08
    318c:	89 e0       	ldi	r24, 0x09	; 9
    318e:	e8 2e       	mov	r14, r24
    3190:	f1 2c       	mov	r15, r1
    3192:	ec 0e       	add	r14, r28
    3194:	fd 1e       	adc	r15, r29
    3196:	ce 01       	movw	r24, r28
    3198:	01 96       	adiw	r24, 0x01	; 1
    319a:	b7 01       	movw	r22, r14
    319c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    31a0:	8e 01       	movw	r16, r28
    31a2:	0f 5e       	subi	r16, 0xEF	; 239
    31a4:	1f 4f       	sbci	r17, 0xFF	; 255
    31a6:	ce 01       	movw	r24, r28
    31a8:	05 96       	adiw	r24, 0x05	; 5
    31aa:	b8 01       	movw	r22, r16
    31ac:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    31b0:	89 85       	ldd	r24, Y+9	; 0x09
    31b2:	82 30       	cpi	r24, 0x02	; 2
    31b4:	40 f0       	brcs	.+16     	; 0x31c6 <__gesf2+0x56>
    31b6:	89 89       	ldd	r24, Y+17	; 0x11
    31b8:	82 30       	cpi	r24, 0x02	; 2
    31ba:	28 f0       	brcs	.+10     	; 0x31c6 <__gesf2+0x56>
    31bc:	c7 01       	movw	r24, r14
    31be:	b8 01       	movw	r22, r16
    31c0:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__fpcmp_parts_f>
    31c4:	01 c0       	rjmp	.+2      	; 0x31c8 <__gesf2+0x58>
    31c6:	8f ef       	ldi	r24, 0xFF	; 255
    31c8:	68 96       	adiw	r28, 0x18	; 24
    31ca:	e6 e0       	ldi	r30, 0x06	; 6
    31cc:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

000031d0 <__ltsf2>:
    31d0:	a8 e1       	ldi	r26, 0x18	; 24
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	ee ee       	ldi	r30, 0xEE	; 238
    31d6:	f8 e1       	ldi	r31, 0x18	; 24
    31d8:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__prologue_saves__+0x18>
    31dc:	69 83       	std	Y+1, r22	; 0x01
    31de:	7a 83       	std	Y+2, r23	; 0x02
    31e0:	8b 83       	std	Y+3, r24	; 0x03
    31e2:	9c 83       	std	Y+4, r25	; 0x04
    31e4:	2d 83       	std	Y+5, r18	; 0x05
    31e6:	3e 83       	std	Y+6, r19	; 0x06
    31e8:	4f 83       	std	Y+7, r20	; 0x07
    31ea:	58 87       	std	Y+8, r21	; 0x08
    31ec:	89 e0       	ldi	r24, 0x09	; 9
    31ee:	e8 2e       	mov	r14, r24
    31f0:	f1 2c       	mov	r15, r1
    31f2:	ec 0e       	add	r14, r28
    31f4:	fd 1e       	adc	r15, r29
    31f6:	ce 01       	movw	r24, r28
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	b7 01       	movw	r22, r14
    31fc:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    3200:	8e 01       	movw	r16, r28
    3202:	0f 5e       	subi	r16, 0xEF	; 239
    3204:	1f 4f       	sbci	r17, 0xFF	; 255
    3206:	ce 01       	movw	r24, r28
    3208:	05 96       	adiw	r24, 0x05	; 5
    320a:	b8 01       	movw	r22, r16
    320c:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    3210:	89 85       	ldd	r24, Y+9	; 0x09
    3212:	82 30       	cpi	r24, 0x02	; 2
    3214:	40 f0       	brcs	.+16     	; 0x3226 <__ltsf2+0x56>
    3216:	89 89       	ldd	r24, Y+17	; 0x11
    3218:	82 30       	cpi	r24, 0x02	; 2
    321a:	28 f0       	brcs	.+10     	; 0x3226 <__ltsf2+0x56>
    321c:	c7 01       	movw	r24, r14
    321e:	b8 01       	movw	r22, r16
    3220:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__fpcmp_parts_f>
    3224:	01 c0       	rjmp	.+2      	; 0x3228 <__ltsf2+0x58>
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	68 96       	adiw	r28, 0x18	; 24
    322a:	e6 e0       	ldi	r30, 0x06	; 6
    322c:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__epilogue_restores__+0x18>

00003230 <__floatsisf>:
    3230:	a8 e0       	ldi	r26, 0x08	; 8
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	ee e1       	ldi	r30, 0x1E	; 30
    3236:	f9 e1       	ldi	r31, 0x19	; 25
    3238:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <__prologue_saves__+0x12>
    323c:	9b 01       	movw	r18, r22
    323e:	ac 01       	movw	r20, r24
    3240:	83 e0       	ldi	r24, 0x03	; 3
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	da 01       	movw	r26, r20
    3246:	c9 01       	movw	r24, r18
    3248:	88 27       	eor	r24, r24
    324a:	b7 fd       	sbrc	r27, 7
    324c:	83 95       	inc	r24
    324e:	99 27       	eor	r25, r25
    3250:	aa 27       	eor	r26, r26
    3252:	bb 27       	eor	r27, r27
    3254:	b8 2e       	mov	r11, r24
    3256:	21 15       	cp	r18, r1
    3258:	31 05       	cpc	r19, r1
    325a:	41 05       	cpc	r20, r1
    325c:	51 05       	cpc	r21, r1
    325e:	19 f4       	brne	.+6      	; 0x3266 <__floatsisf+0x36>
    3260:	82 e0       	ldi	r24, 0x02	; 2
    3262:	89 83       	std	Y+1, r24	; 0x01
    3264:	3a c0       	rjmp	.+116    	; 0x32da <__floatsisf+0xaa>
    3266:	88 23       	and	r24, r24
    3268:	a9 f0       	breq	.+42     	; 0x3294 <__floatsisf+0x64>
    326a:	20 30       	cpi	r18, 0x00	; 0
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	38 07       	cpc	r19, r24
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	48 07       	cpc	r20, r24
    3274:	80 e8       	ldi	r24, 0x80	; 128
    3276:	58 07       	cpc	r21, r24
    3278:	29 f4       	brne	.+10     	; 0x3284 <__floatsisf+0x54>
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	70 e0       	ldi	r23, 0x00	; 0
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	9f ec       	ldi	r25, 0xCF	; 207
    3282:	30 c0       	rjmp	.+96     	; 0x32e4 <__floatsisf+0xb4>
    3284:	ee 24       	eor	r14, r14
    3286:	ff 24       	eor	r15, r15
    3288:	87 01       	movw	r16, r14
    328a:	e2 1a       	sub	r14, r18
    328c:	f3 0a       	sbc	r15, r19
    328e:	04 0b       	sbc	r16, r20
    3290:	15 0b       	sbc	r17, r21
    3292:	02 c0       	rjmp	.+4      	; 0x3298 <__floatsisf+0x68>
    3294:	79 01       	movw	r14, r18
    3296:	8a 01       	movw	r16, r20
    3298:	8e e1       	ldi	r24, 0x1E	; 30
    329a:	c8 2e       	mov	r12, r24
    329c:	d1 2c       	mov	r13, r1
    329e:	dc 82       	std	Y+4, r13	; 0x04
    32a0:	cb 82       	std	Y+3, r12	; 0x03
    32a2:	ed 82       	std	Y+5, r14	; 0x05
    32a4:	fe 82       	std	Y+6, r15	; 0x06
    32a6:	0f 83       	std	Y+7, r16	; 0x07
    32a8:	18 87       	std	Y+8, r17	; 0x08
    32aa:	c8 01       	movw	r24, r16
    32ac:	b7 01       	movw	r22, r14
    32ae:	0e 94 ca 19 	call	0x3394	; 0x3394 <__clzsi2>
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	18 16       	cp	r1, r24
    32b6:	19 06       	cpc	r1, r25
    32b8:	84 f4       	brge	.+32     	; 0x32da <__floatsisf+0xaa>
    32ba:	08 2e       	mov	r0, r24
    32bc:	04 c0       	rjmp	.+8      	; 0x32c6 <__floatsisf+0x96>
    32be:	ee 0c       	add	r14, r14
    32c0:	ff 1c       	adc	r15, r15
    32c2:	00 1f       	adc	r16, r16
    32c4:	11 1f       	adc	r17, r17
    32c6:	0a 94       	dec	r0
    32c8:	d2 f7       	brpl	.-12     	; 0x32be <__floatsisf+0x8e>
    32ca:	ed 82       	std	Y+5, r14	; 0x05
    32cc:	fe 82       	std	Y+6, r15	; 0x06
    32ce:	0f 83       	std	Y+7, r16	; 0x07
    32d0:	18 87       	std	Y+8, r17	; 0x08
    32d2:	c8 1a       	sub	r12, r24
    32d4:	d9 0a       	sbc	r13, r25
    32d6:	dc 82       	std	Y+4, r13	; 0x04
    32d8:	cb 82       	std	Y+3, r12	; 0x03
    32da:	ba 82       	std	Y+2, r11	; 0x02
    32dc:	ce 01       	movw	r24, r28
    32de:	01 96       	adiw	r24, 0x01	; 1
    32e0:	0e 94 19 1a 	call	0x3432	; 0x3432 <__pack_f>
    32e4:	28 96       	adiw	r28, 0x08	; 8
    32e6:	e9 e0       	ldi	r30, 0x09	; 9
    32e8:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__epilogue_restores__+0x12>

000032ec <__fixsfsi>:
    32ec:	ac e0       	ldi	r26, 0x0C	; 12
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	ec e7       	ldi	r30, 0x7C	; 124
    32f2:	f9 e1       	ldi	r31, 0x19	; 25
    32f4:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <__prologue_saves__+0x20>
    32f8:	69 83       	std	Y+1, r22	; 0x01
    32fa:	7a 83       	std	Y+2, r23	; 0x02
    32fc:	8b 83       	std	Y+3, r24	; 0x03
    32fe:	9c 83       	std	Y+4, r25	; 0x04
    3300:	ce 01       	movw	r24, r28
    3302:	01 96       	adiw	r24, 0x01	; 1
    3304:	be 01       	movw	r22, r28
    3306:	6b 5f       	subi	r22, 0xFB	; 251
    3308:	7f 4f       	sbci	r23, 0xFF	; 255
    330a:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    330e:	8d 81       	ldd	r24, Y+5	; 0x05
    3310:	82 30       	cpi	r24, 0x02	; 2
    3312:	61 f1       	breq	.+88     	; 0x336c <__fixsfsi+0x80>
    3314:	82 30       	cpi	r24, 0x02	; 2
    3316:	50 f1       	brcs	.+84     	; 0x336c <__fixsfsi+0x80>
    3318:	84 30       	cpi	r24, 0x04	; 4
    331a:	21 f4       	brne	.+8      	; 0x3324 <__fixsfsi+0x38>
    331c:	8e 81       	ldd	r24, Y+6	; 0x06
    331e:	88 23       	and	r24, r24
    3320:	51 f1       	breq	.+84     	; 0x3376 <__fixsfsi+0x8a>
    3322:	2e c0       	rjmp	.+92     	; 0x3380 <__fixsfsi+0x94>
    3324:	2f 81       	ldd	r18, Y+7	; 0x07
    3326:	38 85       	ldd	r19, Y+8	; 0x08
    3328:	37 fd       	sbrc	r19, 7
    332a:	20 c0       	rjmp	.+64     	; 0x336c <__fixsfsi+0x80>
    332c:	6e 81       	ldd	r22, Y+6	; 0x06
    332e:	2f 31       	cpi	r18, 0x1F	; 31
    3330:	31 05       	cpc	r19, r1
    3332:	1c f0       	brlt	.+6      	; 0x333a <__fixsfsi+0x4e>
    3334:	66 23       	and	r22, r22
    3336:	f9 f0       	breq	.+62     	; 0x3376 <__fixsfsi+0x8a>
    3338:	23 c0       	rjmp	.+70     	; 0x3380 <__fixsfsi+0x94>
    333a:	8e e1       	ldi	r24, 0x1E	; 30
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	82 1b       	sub	r24, r18
    3340:	93 0b       	sbc	r25, r19
    3342:	29 85       	ldd	r18, Y+9	; 0x09
    3344:	3a 85       	ldd	r19, Y+10	; 0x0a
    3346:	4b 85       	ldd	r20, Y+11	; 0x0b
    3348:	5c 85       	ldd	r21, Y+12	; 0x0c
    334a:	04 c0       	rjmp	.+8      	; 0x3354 <__fixsfsi+0x68>
    334c:	56 95       	lsr	r21
    334e:	47 95       	ror	r20
    3350:	37 95       	ror	r19
    3352:	27 95       	ror	r18
    3354:	8a 95       	dec	r24
    3356:	d2 f7       	brpl	.-12     	; 0x334c <__fixsfsi+0x60>
    3358:	66 23       	and	r22, r22
    335a:	b1 f0       	breq	.+44     	; 0x3388 <__fixsfsi+0x9c>
    335c:	50 95       	com	r21
    335e:	40 95       	com	r20
    3360:	30 95       	com	r19
    3362:	21 95       	neg	r18
    3364:	3f 4f       	sbci	r19, 0xFF	; 255
    3366:	4f 4f       	sbci	r20, 0xFF	; 255
    3368:	5f 4f       	sbci	r21, 0xFF	; 255
    336a:	0e c0       	rjmp	.+28     	; 0x3388 <__fixsfsi+0x9c>
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	40 e0       	ldi	r20, 0x00	; 0
    3372:	50 e0       	ldi	r21, 0x00	; 0
    3374:	09 c0       	rjmp	.+18     	; 0x3388 <__fixsfsi+0x9c>
    3376:	2f ef       	ldi	r18, 0xFF	; 255
    3378:	3f ef       	ldi	r19, 0xFF	; 255
    337a:	4f ef       	ldi	r20, 0xFF	; 255
    337c:	5f e7       	ldi	r21, 0x7F	; 127
    337e:	04 c0       	rjmp	.+8      	; 0x3388 <__fixsfsi+0x9c>
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	50 e8       	ldi	r21, 0x80	; 128
    3388:	b9 01       	movw	r22, r18
    338a:	ca 01       	movw	r24, r20
    338c:	2c 96       	adiw	r28, 0x0c	; 12
    338e:	e2 e0       	ldi	r30, 0x02	; 2
    3390:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <__epilogue_restores__+0x20>

00003394 <__clzsi2>:
    3394:	ef 92       	push	r14
    3396:	ff 92       	push	r15
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	7b 01       	movw	r14, r22
    339e:	8c 01       	movw	r16, r24
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	e8 16       	cp	r14, r24
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	f8 06       	cpc	r15, r24
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	08 07       	cpc	r16, r24
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	18 07       	cpc	r17, r24
    33b0:	88 f4       	brcc	.+34     	; 0x33d4 <__clzsi2+0x40>
    33b2:	8f ef       	ldi	r24, 0xFF	; 255
    33b4:	e8 16       	cp	r14, r24
    33b6:	f1 04       	cpc	r15, r1
    33b8:	01 05       	cpc	r16, r1
    33ba:	11 05       	cpc	r17, r1
    33bc:	31 f0       	breq	.+12     	; 0x33ca <__clzsi2+0x36>
    33be:	28 f0       	brcs	.+10     	; 0x33ca <__clzsi2+0x36>
    33c0:	88 e0       	ldi	r24, 0x08	; 8
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	a0 e0       	ldi	r26, 0x00	; 0
    33c6:	b0 e0       	ldi	r27, 0x00	; 0
    33c8:	17 c0       	rjmp	.+46     	; 0x33f8 <__clzsi2+0x64>
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	a0 e0       	ldi	r26, 0x00	; 0
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	12 c0       	rjmp	.+36     	; 0x33f8 <__clzsi2+0x64>
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	e8 16       	cp	r14, r24
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	f8 06       	cpc	r15, r24
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	08 07       	cpc	r16, r24
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	18 07       	cpc	r17, r24
    33e4:	28 f0       	brcs	.+10     	; 0x33f0 <__clzsi2+0x5c>
    33e6:	88 e1       	ldi	r24, 0x18	; 24
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 e0       	ldi	r26, 0x00	; 0
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	04 c0       	rjmp	.+8      	; 0x33f8 <__clzsi2+0x64>
    33f0:	80 e1       	ldi	r24, 0x10	; 16
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	a0 e0       	ldi	r26, 0x00	; 0
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	20 e2       	ldi	r18, 0x20	; 32
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	28 1b       	sub	r18, r24
    3402:	39 0b       	sbc	r19, r25
    3404:	4a 0b       	sbc	r20, r26
    3406:	5b 0b       	sbc	r21, r27
    3408:	04 c0       	rjmp	.+8      	; 0x3412 <__clzsi2+0x7e>
    340a:	16 95       	lsr	r17
    340c:	07 95       	ror	r16
    340e:	f7 94       	ror	r15
    3410:	e7 94       	ror	r14
    3412:	8a 95       	dec	r24
    3414:	d2 f7       	brpl	.-12     	; 0x340a <__clzsi2+0x76>
    3416:	f7 01       	movw	r30, r14
    3418:	ed 5b       	subi	r30, 0xBD	; 189
    341a:	fd 4f       	sbci	r31, 0xFD	; 253
    341c:	80 81       	ld	r24, Z
    341e:	28 1b       	sub	r18, r24
    3420:	31 09       	sbc	r19, r1
    3422:	41 09       	sbc	r20, r1
    3424:	51 09       	sbc	r21, r1
    3426:	c9 01       	movw	r24, r18
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	ef 90       	pop	r14
    3430:	08 95       	ret

00003432 <__pack_f>:
    3432:	df 92       	push	r13
    3434:	ef 92       	push	r14
    3436:	ff 92       	push	r15
    3438:	0f 93       	push	r16
    343a:	1f 93       	push	r17
    343c:	fc 01       	movw	r30, r24
    343e:	e4 80       	ldd	r14, Z+4	; 0x04
    3440:	f5 80       	ldd	r15, Z+5	; 0x05
    3442:	06 81       	ldd	r16, Z+6	; 0x06
    3444:	17 81       	ldd	r17, Z+7	; 0x07
    3446:	d1 80       	ldd	r13, Z+1	; 0x01
    3448:	80 81       	ld	r24, Z
    344a:	82 30       	cpi	r24, 0x02	; 2
    344c:	48 f4       	brcc	.+18     	; 0x3460 <__pack_f+0x2e>
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	a0 e1       	ldi	r26, 0x10	; 16
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	e8 2a       	or	r14, r24
    3458:	f9 2a       	or	r15, r25
    345a:	0a 2b       	or	r16, r26
    345c:	1b 2b       	or	r17, r27
    345e:	a5 c0       	rjmp	.+330    	; 0x35aa <__pack_f+0x178>
    3460:	84 30       	cpi	r24, 0x04	; 4
    3462:	09 f4       	brne	.+2      	; 0x3466 <__pack_f+0x34>
    3464:	9f c0       	rjmp	.+318    	; 0x35a4 <__pack_f+0x172>
    3466:	82 30       	cpi	r24, 0x02	; 2
    3468:	21 f4       	brne	.+8      	; 0x3472 <__pack_f+0x40>
    346a:	ee 24       	eor	r14, r14
    346c:	ff 24       	eor	r15, r15
    346e:	87 01       	movw	r16, r14
    3470:	05 c0       	rjmp	.+10     	; 0x347c <__pack_f+0x4a>
    3472:	e1 14       	cp	r14, r1
    3474:	f1 04       	cpc	r15, r1
    3476:	01 05       	cpc	r16, r1
    3478:	11 05       	cpc	r17, r1
    347a:	19 f4       	brne	.+6      	; 0x3482 <__pack_f+0x50>
    347c:	e0 e0       	ldi	r30, 0x00	; 0
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	96 c0       	rjmp	.+300    	; 0x35ae <__pack_f+0x17c>
    3482:	62 81       	ldd	r22, Z+2	; 0x02
    3484:	73 81       	ldd	r23, Z+3	; 0x03
    3486:	9f ef       	ldi	r25, 0xFF	; 255
    3488:	62 38       	cpi	r22, 0x82	; 130
    348a:	79 07       	cpc	r23, r25
    348c:	0c f0       	brlt	.+2      	; 0x3490 <__pack_f+0x5e>
    348e:	5b c0       	rjmp	.+182    	; 0x3546 <__pack_f+0x114>
    3490:	22 e8       	ldi	r18, 0x82	; 130
    3492:	3f ef       	ldi	r19, 0xFF	; 255
    3494:	26 1b       	sub	r18, r22
    3496:	37 0b       	sbc	r19, r23
    3498:	2a 31       	cpi	r18, 0x1A	; 26
    349a:	31 05       	cpc	r19, r1
    349c:	2c f0       	brlt	.+10     	; 0x34a8 <__pack_f+0x76>
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	40 e0       	ldi	r20, 0x00	; 0
    34a4:	50 e0       	ldi	r21, 0x00	; 0
    34a6:	2a c0       	rjmp	.+84     	; 0x34fc <__pack_f+0xca>
    34a8:	b8 01       	movw	r22, r16
    34aa:	a7 01       	movw	r20, r14
    34ac:	02 2e       	mov	r0, r18
    34ae:	04 c0       	rjmp	.+8      	; 0x34b8 <__pack_f+0x86>
    34b0:	76 95       	lsr	r23
    34b2:	67 95       	ror	r22
    34b4:	57 95       	ror	r21
    34b6:	47 95       	ror	r20
    34b8:	0a 94       	dec	r0
    34ba:	d2 f7       	brpl	.-12     	; 0x34b0 <__pack_f+0x7e>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a0 e0       	ldi	r26, 0x00	; 0
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <__pack_f+0x9c>
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	aa 1f       	adc	r26, r26
    34cc:	bb 1f       	adc	r27, r27
    34ce:	2a 95       	dec	r18
    34d0:	d2 f7       	brpl	.-12     	; 0x34c6 <__pack_f+0x94>
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	a1 09       	sbc	r26, r1
    34d6:	b1 09       	sbc	r27, r1
    34d8:	8e 21       	and	r24, r14
    34da:	9f 21       	and	r25, r15
    34dc:	a0 23       	and	r26, r16
    34de:	b1 23       	and	r27, r17
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	a1 05       	cpc	r26, r1
    34e4:	b1 05       	cpc	r27, r1
    34e6:	21 f0       	breq	.+8      	; 0x34f0 <__pack_f+0xbe>
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a0 e0       	ldi	r26, 0x00	; 0
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	9a 01       	movw	r18, r20
    34f2:	ab 01       	movw	r20, r22
    34f4:	28 2b       	or	r18, r24
    34f6:	39 2b       	or	r19, r25
    34f8:	4a 2b       	or	r20, r26
    34fa:	5b 2b       	or	r21, r27
    34fc:	da 01       	movw	r26, r20
    34fe:	c9 01       	movw	r24, r18
    3500:	8f 77       	andi	r24, 0x7F	; 127
    3502:	90 70       	andi	r25, 0x00	; 0
    3504:	a0 70       	andi	r26, 0x00	; 0
    3506:	b0 70       	andi	r27, 0x00	; 0
    3508:	80 34       	cpi	r24, 0x40	; 64
    350a:	91 05       	cpc	r25, r1
    350c:	a1 05       	cpc	r26, r1
    350e:	b1 05       	cpc	r27, r1
    3510:	39 f4       	brne	.+14     	; 0x3520 <__pack_f+0xee>
    3512:	27 ff       	sbrs	r18, 7
    3514:	09 c0       	rjmp	.+18     	; 0x3528 <__pack_f+0xf6>
    3516:	20 5c       	subi	r18, 0xC0	; 192
    3518:	3f 4f       	sbci	r19, 0xFF	; 255
    351a:	4f 4f       	sbci	r20, 0xFF	; 255
    351c:	5f 4f       	sbci	r21, 0xFF	; 255
    351e:	04 c0       	rjmp	.+8      	; 0x3528 <__pack_f+0xf6>
    3520:	21 5c       	subi	r18, 0xC1	; 193
    3522:	3f 4f       	sbci	r19, 0xFF	; 255
    3524:	4f 4f       	sbci	r20, 0xFF	; 255
    3526:	5f 4f       	sbci	r21, 0xFF	; 255
    3528:	e0 e0       	ldi	r30, 0x00	; 0
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	20 30       	cpi	r18, 0x00	; 0
    352e:	a0 e0       	ldi	r26, 0x00	; 0
    3530:	3a 07       	cpc	r19, r26
    3532:	a0 e0       	ldi	r26, 0x00	; 0
    3534:	4a 07       	cpc	r20, r26
    3536:	a0 e4       	ldi	r26, 0x40	; 64
    3538:	5a 07       	cpc	r21, r26
    353a:	10 f0       	brcs	.+4      	; 0x3540 <__pack_f+0x10e>
    353c:	e1 e0       	ldi	r30, 0x01	; 1
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	79 01       	movw	r14, r18
    3542:	8a 01       	movw	r16, r20
    3544:	27 c0       	rjmp	.+78     	; 0x3594 <__pack_f+0x162>
    3546:	60 38       	cpi	r22, 0x80	; 128
    3548:	71 05       	cpc	r23, r1
    354a:	64 f5       	brge	.+88     	; 0x35a4 <__pack_f+0x172>
    354c:	fb 01       	movw	r30, r22
    354e:	e1 58       	subi	r30, 0x81	; 129
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	d8 01       	movw	r26, r16
    3554:	c7 01       	movw	r24, r14
    3556:	8f 77       	andi	r24, 0x7F	; 127
    3558:	90 70       	andi	r25, 0x00	; 0
    355a:	a0 70       	andi	r26, 0x00	; 0
    355c:	b0 70       	andi	r27, 0x00	; 0
    355e:	80 34       	cpi	r24, 0x40	; 64
    3560:	91 05       	cpc	r25, r1
    3562:	a1 05       	cpc	r26, r1
    3564:	b1 05       	cpc	r27, r1
    3566:	39 f4       	brne	.+14     	; 0x3576 <__pack_f+0x144>
    3568:	e7 fe       	sbrs	r14, 7
    356a:	0d c0       	rjmp	.+26     	; 0x3586 <__pack_f+0x154>
    356c:	80 e4       	ldi	r24, 0x40	; 64
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	a0 e0       	ldi	r26, 0x00	; 0
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	04 c0       	rjmp	.+8      	; 0x357e <__pack_f+0x14c>
    3576:	8f e3       	ldi	r24, 0x3F	; 63
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	a0 e0       	ldi	r26, 0x00	; 0
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	e8 0e       	add	r14, r24
    3580:	f9 1e       	adc	r15, r25
    3582:	0a 1f       	adc	r16, r26
    3584:	1b 1f       	adc	r17, r27
    3586:	17 ff       	sbrs	r17, 7
    3588:	05 c0       	rjmp	.+10     	; 0x3594 <__pack_f+0x162>
    358a:	16 95       	lsr	r17
    358c:	07 95       	ror	r16
    358e:	f7 94       	ror	r15
    3590:	e7 94       	ror	r14
    3592:	31 96       	adiw	r30, 0x01	; 1
    3594:	87 e0       	ldi	r24, 0x07	; 7
    3596:	16 95       	lsr	r17
    3598:	07 95       	ror	r16
    359a:	f7 94       	ror	r15
    359c:	e7 94       	ror	r14
    359e:	8a 95       	dec	r24
    35a0:	d1 f7       	brne	.-12     	; 0x3596 <__pack_f+0x164>
    35a2:	05 c0       	rjmp	.+10     	; 0x35ae <__pack_f+0x17c>
    35a4:	ee 24       	eor	r14, r14
    35a6:	ff 24       	eor	r15, r15
    35a8:	87 01       	movw	r16, r14
    35aa:	ef ef       	ldi	r30, 0xFF	; 255
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	6e 2f       	mov	r22, r30
    35b0:	67 95       	ror	r22
    35b2:	66 27       	eor	r22, r22
    35b4:	67 95       	ror	r22
    35b6:	90 2f       	mov	r25, r16
    35b8:	9f 77       	andi	r25, 0x7F	; 127
    35ba:	d7 94       	ror	r13
    35bc:	dd 24       	eor	r13, r13
    35be:	d7 94       	ror	r13
    35c0:	8e 2f       	mov	r24, r30
    35c2:	86 95       	lsr	r24
    35c4:	49 2f       	mov	r20, r25
    35c6:	46 2b       	or	r20, r22
    35c8:	58 2f       	mov	r21, r24
    35ca:	5d 29       	or	r21, r13
    35cc:	b7 01       	movw	r22, r14
    35ce:	ca 01       	movw	r24, r20
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	ff 90       	pop	r15
    35d6:	ef 90       	pop	r14
    35d8:	df 90       	pop	r13
    35da:	08 95       	ret

000035dc <__unpack_f>:
    35dc:	fc 01       	movw	r30, r24
    35de:	db 01       	movw	r26, r22
    35e0:	40 81       	ld	r20, Z
    35e2:	51 81       	ldd	r21, Z+1	; 0x01
    35e4:	22 81       	ldd	r18, Z+2	; 0x02
    35e6:	62 2f       	mov	r22, r18
    35e8:	6f 77       	andi	r22, 0x7F	; 127
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	22 1f       	adc	r18, r18
    35ee:	22 27       	eor	r18, r18
    35f0:	22 1f       	adc	r18, r18
    35f2:	93 81       	ldd	r25, Z+3	; 0x03
    35f4:	89 2f       	mov	r24, r25
    35f6:	88 0f       	add	r24, r24
    35f8:	82 2b       	or	r24, r18
    35fa:	28 2f       	mov	r18, r24
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	99 1f       	adc	r25, r25
    3600:	99 27       	eor	r25, r25
    3602:	99 1f       	adc	r25, r25
    3604:	11 96       	adiw	r26, 0x01	; 1
    3606:	9c 93       	st	X, r25
    3608:	11 97       	sbiw	r26, 0x01	; 1
    360a:	21 15       	cp	r18, r1
    360c:	31 05       	cpc	r19, r1
    360e:	a9 f5       	brne	.+106    	; 0x367a <__unpack_f+0x9e>
    3610:	41 15       	cp	r20, r1
    3612:	51 05       	cpc	r21, r1
    3614:	61 05       	cpc	r22, r1
    3616:	71 05       	cpc	r23, r1
    3618:	11 f4       	brne	.+4      	; 0x361e <__unpack_f+0x42>
    361a:	82 e0       	ldi	r24, 0x02	; 2
    361c:	37 c0       	rjmp	.+110    	; 0x368c <__unpack_f+0xb0>
    361e:	82 e8       	ldi	r24, 0x82	; 130
    3620:	9f ef       	ldi	r25, 0xFF	; 255
    3622:	13 96       	adiw	r26, 0x03	; 3
    3624:	9c 93       	st	X, r25
    3626:	8e 93       	st	-X, r24
    3628:	12 97       	sbiw	r26, 0x02	; 2
    362a:	9a 01       	movw	r18, r20
    362c:	ab 01       	movw	r20, r22
    362e:	67 e0       	ldi	r22, 0x07	; 7
    3630:	22 0f       	add	r18, r18
    3632:	33 1f       	adc	r19, r19
    3634:	44 1f       	adc	r20, r20
    3636:	55 1f       	adc	r21, r21
    3638:	6a 95       	dec	r22
    363a:	d1 f7       	brne	.-12     	; 0x3630 <__unpack_f+0x54>
    363c:	83 e0       	ldi	r24, 0x03	; 3
    363e:	8c 93       	st	X, r24
    3640:	0d c0       	rjmp	.+26     	; 0x365c <__unpack_f+0x80>
    3642:	22 0f       	add	r18, r18
    3644:	33 1f       	adc	r19, r19
    3646:	44 1f       	adc	r20, r20
    3648:	55 1f       	adc	r21, r21
    364a:	12 96       	adiw	r26, 0x02	; 2
    364c:	8d 91       	ld	r24, X+
    364e:	9c 91       	ld	r25, X
    3650:	13 97       	sbiw	r26, 0x03	; 3
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	13 96       	adiw	r26, 0x03	; 3
    3656:	9c 93       	st	X, r25
    3658:	8e 93       	st	-X, r24
    365a:	12 97       	sbiw	r26, 0x02	; 2
    365c:	20 30       	cpi	r18, 0x00	; 0
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	38 07       	cpc	r19, r24
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	48 07       	cpc	r20, r24
    3666:	80 e4       	ldi	r24, 0x40	; 64
    3668:	58 07       	cpc	r21, r24
    366a:	58 f3       	brcs	.-42     	; 0x3642 <__unpack_f+0x66>
    366c:	14 96       	adiw	r26, 0x04	; 4
    366e:	2d 93       	st	X+, r18
    3670:	3d 93       	st	X+, r19
    3672:	4d 93       	st	X+, r20
    3674:	5c 93       	st	X, r21
    3676:	17 97       	sbiw	r26, 0x07	; 7
    3678:	08 95       	ret
    367a:	2f 3f       	cpi	r18, 0xFF	; 255
    367c:	31 05       	cpc	r19, r1
    367e:	79 f4       	brne	.+30     	; 0x369e <__unpack_f+0xc2>
    3680:	41 15       	cp	r20, r1
    3682:	51 05       	cpc	r21, r1
    3684:	61 05       	cpc	r22, r1
    3686:	71 05       	cpc	r23, r1
    3688:	19 f4       	brne	.+6      	; 0x3690 <__unpack_f+0xb4>
    368a:	84 e0       	ldi	r24, 0x04	; 4
    368c:	8c 93       	st	X, r24
    368e:	08 95       	ret
    3690:	64 ff       	sbrs	r22, 4
    3692:	03 c0       	rjmp	.+6      	; 0x369a <__unpack_f+0xbe>
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	8c 93       	st	X, r24
    3698:	12 c0       	rjmp	.+36     	; 0x36be <__unpack_f+0xe2>
    369a:	1c 92       	st	X, r1
    369c:	10 c0       	rjmp	.+32     	; 0x36be <__unpack_f+0xe2>
    369e:	2f 57       	subi	r18, 0x7F	; 127
    36a0:	30 40       	sbci	r19, 0x00	; 0
    36a2:	13 96       	adiw	r26, 0x03	; 3
    36a4:	3c 93       	st	X, r19
    36a6:	2e 93       	st	-X, r18
    36a8:	12 97       	sbiw	r26, 0x02	; 2
    36aa:	83 e0       	ldi	r24, 0x03	; 3
    36ac:	8c 93       	st	X, r24
    36ae:	87 e0       	ldi	r24, 0x07	; 7
    36b0:	44 0f       	add	r20, r20
    36b2:	55 1f       	adc	r21, r21
    36b4:	66 1f       	adc	r22, r22
    36b6:	77 1f       	adc	r23, r23
    36b8:	8a 95       	dec	r24
    36ba:	d1 f7       	brne	.-12     	; 0x36b0 <__unpack_f+0xd4>
    36bc:	70 64       	ori	r23, 0x40	; 64
    36be:	14 96       	adiw	r26, 0x04	; 4
    36c0:	4d 93       	st	X+, r20
    36c2:	5d 93       	st	X+, r21
    36c4:	6d 93       	st	X+, r22
    36c6:	7c 93       	st	X, r23
    36c8:	17 97       	sbiw	r26, 0x07	; 7
    36ca:	08 95       	ret

000036cc <__fpcmp_parts_f>:
    36cc:	1f 93       	push	r17
    36ce:	dc 01       	movw	r26, r24
    36d0:	fb 01       	movw	r30, r22
    36d2:	9c 91       	ld	r25, X
    36d4:	92 30       	cpi	r25, 0x02	; 2
    36d6:	08 f4       	brcc	.+2      	; 0x36da <__fpcmp_parts_f+0xe>
    36d8:	47 c0       	rjmp	.+142    	; 0x3768 <__fpcmp_parts_f+0x9c>
    36da:	80 81       	ld	r24, Z
    36dc:	82 30       	cpi	r24, 0x02	; 2
    36de:	08 f4       	brcc	.+2      	; 0x36e2 <__fpcmp_parts_f+0x16>
    36e0:	43 c0       	rjmp	.+134    	; 0x3768 <__fpcmp_parts_f+0x9c>
    36e2:	94 30       	cpi	r25, 0x04	; 4
    36e4:	51 f4       	brne	.+20     	; 0x36fa <__fpcmp_parts_f+0x2e>
    36e6:	11 96       	adiw	r26, 0x01	; 1
    36e8:	1c 91       	ld	r17, X
    36ea:	84 30       	cpi	r24, 0x04	; 4
    36ec:	99 f5       	brne	.+102    	; 0x3754 <__fpcmp_parts_f+0x88>
    36ee:	81 81       	ldd	r24, Z+1	; 0x01
    36f0:	68 2f       	mov	r22, r24
    36f2:	70 e0       	ldi	r23, 0x00	; 0
    36f4:	61 1b       	sub	r22, r17
    36f6:	71 09       	sbc	r23, r1
    36f8:	3f c0       	rjmp	.+126    	; 0x3778 <__fpcmp_parts_f+0xac>
    36fa:	84 30       	cpi	r24, 0x04	; 4
    36fc:	21 f0       	breq	.+8      	; 0x3706 <__fpcmp_parts_f+0x3a>
    36fe:	92 30       	cpi	r25, 0x02	; 2
    3700:	31 f4       	brne	.+12     	; 0x370e <__fpcmp_parts_f+0x42>
    3702:	82 30       	cpi	r24, 0x02	; 2
    3704:	b9 f1       	breq	.+110    	; 0x3774 <__fpcmp_parts_f+0xa8>
    3706:	81 81       	ldd	r24, Z+1	; 0x01
    3708:	88 23       	and	r24, r24
    370a:	89 f1       	breq	.+98     	; 0x376e <__fpcmp_parts_f+0xa2>
    370c:	2d c0       	rjmp	.+90     	; 0x3768 <__fpcmp_parts_f+0x9c>
    370e:	11 96       	adiw	r26, 0x01	; 1
    3710:	1c 91       	ld	r17, X
    3712:	11 97       	sbiw	r26, 0x01	; 1
    3714:	82 30       	cpi	r24, 0x02	; 2
    3716:	f1 f0       	breq	.+60     	; 0x3754 <__fpcmp_parts_f+0x88>
    3718:	81 81       	ldd	r24, Z+1	; 0x01
    371a:	18 17       	cp	r17, r24
    371c:	d9 f4       	brne	.+54     	; 0x3754 <__fpcmp_parts_f+0x88>
    371e:	12 96       	adiw	r26, 0x02	; 2
    3720:	2d 91       	ld	r18, X+
    3722:	3c 91       	ld	r19, X
    3724:	13 97       	sbiw	r26, 0x03	; 3
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	82 17       	cp	r24, r18
    372c:	93 07       	cpc	r25, r19
    372e:	94 f0       	brlt	.+36     	; 0x3754 <__fpcmp_parts_f+0x88>
    3730:	28 17       	cp	r18, r24
    3732:	39 07       	cpc	r19, r25
    3734:	bc f0       	brlt	.+46     	; 0x3764 <__fpcmp_parts_f+0x98>
    3736:	14 96       	adiw	r26, 0x04	; 4
    3738:	8d 91       	ld	r24, X+
    373a:	9d 91       	ld	r25, X+
    373c:	0d 90       	ld	r0, X+
    373e:	bc 91       	ld	r27, X
    3740:	a0 2d       	mov	r26, r0
    3742:	24 81       	ldd	r18, Z+4	; 0x04
    3744:	35 81       	ldd	r19, Z+5	; 0x05
    3746:	46 81       	ldd	r20, Z+6	; 0x06
    3748:	57 81       	ldd	r21, Z+7	; 0x07
    374a:	28 17       	cp	r18, r24
    374c:	39 07       	cpc	r19, r25
    374e:	4a 07       	cpc	r20, r26
    3750:	5b 07       	cpc	r21, r27
    3752:	18 f4       	brcc	.+6      	; 0x375a <__fpcmp_parts_f+0x8e>
    3754:	11 23       	and	r17, r17
    3756:	41 f0       	breq	.+16     	; 0x3768 <__fpcmp_parts_f+0x9c>
    3758:	0a c0       	rjmp	.+20     	; 0x376e <__fpcmp_parts_f+0xa2>
    375a:	82 17       	cp	r24, r18
    375c:	93 07       	cpc	r25, r19
    375e:	a4 07       	cpc	r26, r20
    3760:	b5 07       	cpc	r27, r21
    3762:	40 f4       	brcc	.+16     	; 0x3774 <__fpcmp_parts_f+0xa8>
    3764:	11 23       	and	r17, r17
    3766:	19 f0       	breq	.+6      	; 0x376e <__fpcmp_parts_f+0xa2>
    3768:	61 e0       	ldi	r22, 0x01	; 1
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	05 c0       	rjmp	.+10     	; 0x3778 <__fpcmp_parts_f+0xac>
    376e:	6f ef       	ldi	r22, 0xFF	; 255
    3770:	7f ef       	ldi	r23, 0xFF	; 255
    3772:	02 c0       	rjmp	.+4      	; 0x3778 <__fpcmp_parts_f+0xac>
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	cb 01       	movw	r24, r22
    377a:	1f 91       	pop	r17
    377c:	08 95       	ret

0000377e <malloc>:
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	bc 01       	movw	r22, r24
    3784:	82 30       	cpi	r24, 0x02	; 2
    3786:	91 05       	cpc	r25, r1
    3788:	10 f4       	brcc	.+4      	; 0x378e <malloc+0x10>
    378a:	62 e0       	ldi	r22, 0x02	; 2
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	a0 91 94 06 	lds	r26, 0x0694
    3792:	b0 91 95 06 	lds	r27, 0x0695
    3796:	ed 01       	movw	r28, r26
    3798:	e0 e0       	ldi	r30, 0x00	; 0
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	40 e0       	ldi	r20, 0x00	; 0
    379e:	50 e0       	ldi	r21, 0x00	; 0
    37a0:	21 c0       	rjmp	.+66     	; 0x37e4 <malloc+0x66>
    37a2:	88 81       	ld	r24, Y
    37a4:	99 81       	ldd	r25, Y+1	; 0x01
    37a6:	86 17       	cp	r24, r22
    37a8:	97 07       	cpc	r25, r23
    37aa:	69 f4       	brne	.+26     	; 0x37c6 <malloc+0x48>
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	9b 81       	ldd	r25, Y+3	; 0x03
    37b0:	30 97       	sbiw	r30, 0x00	; 0
    37b2:	19 f0       	breq	.+6      	; 0x37ba <malloc+0x3c>
    37b4:	93 83       	std	Z+3, r25	; 0x03
    37b6:	82 83       	std	Z+2, r24	; 0x02
    37b8:	04 c0       	rjmp	.+8      	; 0x37c2 <malloc+0x44>
    37ba:	90 93 95 06 	sts	0x0695, r25
    37be:	80 93 94 06 	sts	0x0694, r24
    37c2:	fe 01       	movw	r30, r28
    37c4:	34 c0       	rjmp	.+104    	; 0x382e <malloc+0xb0>
    37c6:	68 17       	cp	r22, r24
    37c8:	79 07       	cpc	r23, r25
    37ca:	38 f4       	brcc	.+14     	; 0x37da <malloc+0x5c>
    37cc:	41 15       	cp	r20, r1
    37ce:	51 05       	cpc	r21, r1
    37d0:	19 f0       	breq	.+6      	; 0x37d8 <malloc+0x5a>
    37d2:	84 17       	cp	r24, r20
    37d4:	95 07       	cpc	r25, r21
    37d6:	08 f4       	brcc	.+2      	; 0x37da <malloc+0x5c>
    37d8:	ac 01       	movw	r20, r24
    37da:	fe 01       	movw	r30, r28
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	9b 81       	ldd	r25, Y+3	; 0x03
    37e0:	9c 01       	movw	r18, r24
    37e2:	e9 01       	movw	r28, r18
    37e4:	20 97       	sbiw	r28, 0x00	; 0
    37e6:	e9 f6       	brne	.-70     	; 0x37a2 <malloc+0x24>
    37e8:	41 15       	cp	r20, r1
    37ea:	51 05       	cpc	r21, r1
    37ec:	a9 f1       	breq	.+106    	; 0x3858 <malloc+0xda>
    37ee:	ca 01       	movw	r24, r20
    37f0:	86 1b       	sub	r24, r22
    37f2:	97 0b       	sbc	r25, r23
    37f4:	04 97       	sbiw	r24, 0x04	; 4
    37f6:	08 f4       	brcc	.+2      	; 0x37fa <malloc+0x7c>
    37f8:	ba 01       	movw	r22, r20
    37fa:	e0 e0       	ldi	r30, 0x00	; 0
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	2a c0       	rjmp	.+84     	; 0x3854 <malloc+0xd6>
    3800:	8d 91       	ld	r24, X+
    3802:	9c 91       	ld	r25, X
    3804:	11 97       	sbiw	r26, 0x01	; 1
    3806:	84 17       	cp	r24, r20
    3808:	95 07       	cpc	r25, r21
    380a:	f9 f4       	brne	.+62     	; 0x384a <malloc+0xcc>
    380c:	64 17       	cp	r22, r20
    380e:	75 07       	cpc	r23, r21
    3810:	81 f4       	brne	.+32     	; 0x3832 <malloc+0xb4>
    3812:	12 96       	adiw	r26, 0x02	; 2
    3814:	8d 91       	ld	r24, X+
    3816:	9c 91       	ld	r25, X
    3818:	13 97       	sbiw	r26, 0x03	; 3
    381a:	30 97       	sbiw	r30, 0x00	; 0
    381c:	19 f0       	breq	.+6      	; 0x3824 <malloc+0xa6>
    381e:	93 83       	std	Z+3, r25	; 0x03
    3820:	82 83       	std	Z+2, r24	; 0x02
    3822:	04 c0       	rjmp	.+8      	; 0x382c <malloc+0xae>
    3824:	90 93 95 06 	sts	0x0695, r25
    3828:	80 93 94 06 	sts	0x0694, r24
    382c:	fd 01       	movw	r30, r26
    382e:	32 96       	adiw	r30, 0x02	; 2
    3830:	4f c0       	rjmp	.+158    	; 0x38d0 <malloc+0x152>
    3832:	ca 01       	movw	r24, r20
    3834:	86 1b       	sub	r24, r22
    3836:	97 0b       	sbc	r25, r23
    3838:	fd 01       	movw	r30, r26
    383a:	e8 0f       	add	r30, r24
    383c:	f9 1f       	adc	r31, r25
    383e:	61 93       	st	Z+, r22
    3840:	71 93       	st	Z+, r23
    3842:	02 97       	sbiw	r24, 0x02	; 2
    3844:	8d 93       	st	X+, r24
    3846:	9c 93       	st	X, r25
    3848:	43 c0       	rjmp	.+134    	; 0x38d0 <malloc+0x152>
    384a:	fd 01       	movw	r30, r26
    384c:	82 81       	ldd	r24, Z+2	; 0x02
    384e:	93 81       	ldd	r25, Z+3	; 0x03
    3850:	9c 01       	movw	r18, r24
    3852:	d9 01       	movw	r26, r18
    3854:	10 97       	sbiw	r26, 0x00	; 0
    3856:	a1 f6       	brne	.-88     	; 0x3800 <malloc+0x82>
    3858:	80 91 92 06 	lds	r24, 0x0692
    385c:	90 91 93 06 	lds	r25, 0x0693
    3860:	89 2b       	or	r24, r25
    3862:	41 f4       	brne	.+16     	; 0x3874 <malloc+0xf6>
    3864:	80 91 45 03 	lds	r24, 0x0345
    3868:	90 91 46 03 	lds	r25, 0x0346
    386c:	90 93 93 06 	sts	0x0693, r25
    3870:	80 93 92 06 	sts	0x0692, r24
    3874:	40 91 47 03 	lds	r20, 0x0347
    3878:	50 91 48 03 	lds	r21, 0x0348
    387c:	41 15       	cp	r20, r1
    387e:	51 05       	cpc	r21, r1
    3880:	41 f4       	brne	.+16     	; 0x3892 <malloc+0x114>
    3882:	4d b7       	in	r20, 0x3d	; 61
    3884:	5e b7       	in	r21, 0x3e	; 62
    3886:	80 91 43 03 	lds	r24, 0x0343
    388a:	90 91 44 03 	lds	r25, 0x0344
    388e:	48 1b       	sub	r20, r24
    3890:	59 0b       	sbc	r21, r25
    3892:	20 91 92 06 	lds	r18, 0x0692
    3896:	30 91 93 06 	lds	r19, 0x0693
    389a:	24 17       	cp	r18, r20
    389c:	35 07       	cpc	r19, r21
    389e:	b0 f4       	brcc	.+44     	; 0x38cc <malloc+0x14e>
    38a0:	ca 01       	movw	r24, r20
    38a2:	82 1b       	sub	r24, r18
    38a4:	93 0b       	sbc	r25, r19
    38a6:	86 17       	cp	r24, r22
    38a8:	97 07       	cpc	r25, r23
    38aa:	80 f0       	brcs	.+32     	; 0x38cc <malloc+0x14e>
    38ac:	ab 01       	movw	r20, r22
    38ae:	4e 5f       	subi	r20, 0xFE	; 254
    38b0:	5f 4f       	sbci	r21, 0xFF	; 255
    38b2:	84 17       	cp	r24, r20
    38b4:	95 07       	cpc	r25, r21
    38b6:	50 f0       	brcs	.+20     	; 0x38cc <malloc+0x14e>
    38b8:	42 0f       	add	r20, r18
    38ba:	53 1f       	adc	r21, r19
    38bc:	50 93 93 06 	sts	0x0693, r21
    38c0:	40 93 92 06 	sts	0x0692, r20
    38c4:	f9 01       	movw	r30, r18
    38c6:	61 93       	st	Z+, r22
    38c8:	71 93       	st	Z+, r23
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <malloc+0x152>
    38cc:	e0 e0       	ldi	r30, 0x00	; 0
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	cf 01       	movw	r24, r30
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	08 95       	ret

000038d8 <free>:
    38d8:	cf 93       	push	r28
    38da:	df 93       	push	r29
    38dc:	00 97       	sbiw	r24, 0x00	; 0
    38de:	09 f4       	brne	.+2      	; 0x38e2 <free+0xa>
    38e0:	50 c0       	rjmp	.+160    	; 0x3982 <free+0xaa>
    38e2:	ec 01       	movw	r28, r24
    38e4:	22 97       	sbiw	r28, 0x02	; 2
    38e6:	1b 82       	std	Y+3, r1	; 0x03
    38e8:	1a 82       	std	Y+2, r1	; 0x02
    38ea:	a0 91 94 06 	lds	r26, 0x0694
    38ee:	b0 91 95 06 	lds	r27, 0x0695
    38f2:	10 97       	sbiw	r26, 0x00	; 0
    38f4:	09 f1       	breq	.+66     	; 0x3938 <free+0x60>
    38f6:	40 e0       	ldi	r20, 0x00	; 0
    38f8:	50 e0       	ldi	r21, 0x00	; 0
    38fa:	ac 17       	cp	r26, r28
    38fc:	bd 07       	cpc	r27, r29
    38fe:	08 f1       	brcs	.+66     	; 0x3942 <free+0x6a>
    3900:	bb 83       	std	Y+3, r27	; 0x03
    3902:	aa 83       	std	Y+2, r26	; 0x02
    3904:	fe 01       	movw	r30, r28
    3906:	21 91       	ld	r18, Z+
    3908:	31 91       	ld	r19, Z+
    390a:	e2 0f       	add	r30, r18
    390c:	f3 1f       	adc	r31, r19
    390e:	ae 17       	cp	r26, r30
    3910:	bf 07       	cpc	r27, r31
    3912:	79 f4       	brne	.+30     	; 0x3932 <free+0x5a>
    3914:	8d 91       	ld	r24, X+
    3916:	9c 91       	ld	r25, X
    3918:	11 97       	sbiw	r26, 0x01	; 1
    391a:	28 0f       	add	r18, r24
    391c:	39 1f       	adc	r19, r25
    391e:	2e 5f       	subi	r18, 0xFE	; 254
    3920:	3f 4f       	sbci	r19, 0xFF	; 255
    3922:	39 83       	std	Y+1, r19	; 0x01
    3924:	28 83       	st	Y, r18
    3926:	12 96       	adiw	r26, 0x02	; 2
    3928:	8d 91       	ld	r24, X+
    392a:	9c 91       	ld	r25, X
    392c:	13 97       	sbiw	r26, 0x03	; 3
    392e:	9b 83       	std	Y+3, r25	; 0x03
    3930:	8a 83       	std	Y+2, r24	; 0x02
    3932:	41 15       	cp	r20, r1
    3934:	51 05       	cpc	r21, r1
    3936:	71 f4       	brne	.+28     	; 0x3954 <free+0x7c>
    3938:	d0 93 95 06 	sts	0x0695, r29
    393c:	c0 93 94 06 	sts	0x0694, r28
    3940:	20 c0       	rjmp	.+64     	; 0x3982 <free+0xaa>
    3942:	12 96       	adiw	r26, 0x02	; 2
    3944:	8d 91       	ld	r24, X+
    3946:	9c 91       	ld	r25, X
    3948:	13 97       	sbiw	r26, 0x03	; 3
    394a:	ad 01       	movw	r20, r26
    394c:	00 97       	sbiw	r24, 0x00	; 0
    394e:	11 f0       	breq	.+4      	; 0x3954 <free+0x7c>
    3950:	dc 01       	movw	r26, r24
    3952:	d3 cf       	rjmp	.-90     	; 0x38fa <free+0x22>
    3954:	fa 01       	movw	r30, r20
    3956:	d3 83       	std	Z+3, r29	; 0x03
    3958:	c2 83       	std	Z+2, r28	; 0x02
    395a:	21 91       	ld	r18, Z+
    395c:	31 91       	ld	r19, Z+
    395e:	e2 0f       	add	r30, r18
    3960:	f3 1f       	adc	r31, r19
    3962:	ce 17       	cp	r28, r30
    3964:	df 07       	cpc	r29, r31
    3966:	69 f4       	brne	.+26     	; 0x3982 <free+0xaa>
    3968:	88 81       	ld	r24, Y
    396a:	99 81       	ldd	r25, Y+1	; 0x01
    396c:	28 0f       	add	r18, r24
    396e:	39 1f       	adc	r19, r25
    3970:	2e 5f       	subi	r18, 0xFE	; 254
    3972:	3f 4f       	sbci	r19, 0xFF	; 255
    3974:	fa 01       	movw	r30, r20
    3976:	31 83       	std	Z+1, r19	; 0x01
    3978:	20 83       	st	Z, r18
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	9b 81       	ldd	r25, Y+3	; 0x03
    397e:	93 83       	std	Z+3, r25	; 0x03
    3980:	82 83       	std	Z+2, r24	; 0x02
    3982:	df 91       	pop	r29
    3984:	cf 91       	pop	r28
    3986:	08 95       	ret

00003988 <strncmp>:
    3988:	fb 01       	movw	r30, r22
    398a:	dc 01       	movw	r26, r24
    398c:	41 50       	subi	r20, 0x01	; 1
    398e:	50 40       	sbci	r21, 0x00	; 0
    3990:	30 f0       	brcs	.+12     	; 0x399e <strncmp+0x16>
    3992:	8d 91       	ld	r24, X+
    3994:	01 90       	ld	r0, Z+
    3996:	80 19       	sub	r24, r0
    3998:	19 f4       	brne	.+6      	; 0x39a0 <strncmp+0x18>
    399a:	00 20       	and	r0, r0
    399c:	b9 f7       	brne	.-18     	; 0x398c <strncmp+0x4>
    399e:	88 1b       	sub	r24, r24
    39a0:	99 0b       	sbc	r25, r25
    39a2:	08 95       	ret

000039a4 <__udivmodhi4>:
    39a4:	aa 1b       	sub	r26, r26
    39a6:	bb 1b       	sub	r27, r27
    39a8:	51 e1       	ldi	r21, 0x11	; 17
    39aa:	07 c0       	rjmp	.+14     	; 0x39ba <__udivmodhi4_ep>

000039ac <__udivmodhi4_loop>:
    39ac:	aa 1f       	adc	r26, r26
    39ae:	bb 1f       	adc	r27, r27
    39b0:	a6 17       	cp	r26, r22
    39b2:	b7 07       	cpc	r27, r23
    39b4:	10 f0       	brcs	.+4      	; 0x39ba <__udivmodhi4_ep>
    39b6:	a6 1b       	sub	r26, r22
    39b8:	b7 0b       	sbc	r27, r23

000039ba <__udivmodhi4_ep>:
    39ba:	88 1f       	adc	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	5a 95       	dec	r21
    39c0:	a9 f7       	brne	.-22     	; 0x39ac <__udivmodhi4_loop>
    39c2:	80 95       	com	r24
    39c4:	90 95       	com	r25
    39c6:	bc 01       	movw	r22, r24
    39c8:	cd 01       	movw	r24, r26
    39ca:	08 95       	ret

000039cc <__divmodhi4>:
    39cc:	97 fb       	bst	r25, 7
    39ce:	09 2e       	mov	r0, r25
    39d0:	07 26       	eor	r0, r23
    39d2:	0a d0       	rcall	.+20     	; 0x39e8 <__divmodhi4_neg1>
    39d4:	77 fd       	sbrc	r23, 7
    39d6:	04 d0       	rcall	.+8      	; 0x39e0 <__divmodhi4_neg2>
    39d8:	e5 df       	rcall	.-54     	; 0x39a4 <__udivmodhi4>
    39da:	06 d0       	rcall	.+12     	; 0x39e8 <__divmodhi4_neg1>
    39dc:	00 20       	and	r0, r0
    39de:	1a f4       	brpl	.+6      	; 0x39e6 <__divmodhi4_exit>

000039e0 <__divmodhi4_neg2>:
    39e0:	70 95       	com	r23
    39e2:	61 95       	neg	r22
    39e4:	7f 4f       	sbci	r23, 0xFF	; 255

000039e6 <__divmodhi4_exit>:
    39e6:	08 95       	ret

000039e8 <__divmodhi4_neg1>:
    39e8:	f6 f7       	brtc	.-4      	; 0x39e6 <__divmodhi4_exit>
    39ea:	90 95       	com	r25
    39ec:	81 95       	neg	r24
    39ee:	9f 4f       	sbci	r25, 0xFF	; 255
    39f0:	08 95       	ret

000039f2 <__prologue_saves__>:
    39f2:	2f 92       	push	r2
    39f4:	3f 92       	push	r3
    39f6:	4f 92       	push	r4
    39f8:	5f 92       	push	r5
    39fa:	6f 92       	push	r6
    39fc:	7f 92       	push	r7
    39fe:	8f 92       	push	r8
    3a00:	9f 92       	push	r9
    3a02:	af 92       	push	r10
    3a04:	bf 92       	push	r11
    3a06:	cf 92       	push	r12
    3a08:	df 92       	push	r13
    3a0a:	ef 92       	push	r14
    3a0c:	ff 92       	push	r15
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	ca 1b       	sub	r28, r26
    3a1c:	db 0b       	sbc	r29, r27
    3a1e:	0f b6       	in	r0, 0x3f	; 63
    3a20:	f8 94       	cli
    3a22:	de bf       	out	0x3e, r29	; 62
    3a24:	0f be       	out	0x3f, r0	; 63
    3a26:	cd bf       	out	0x3d, r28	; 61
    3a28:	19 94       	eijmp

00003a2a <__epilogue_restores__>:
    3a2a:	2a 88       	ldd	r2, Y+18	; 0x12
    3a2c:	39 88       	ldd	r3, Y+17	; 0x11
    3a2e:	48 88       	ldd	r4, Y+16	; 0x10
    3a30:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a32:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a34:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a36:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a38:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a3c:	b9 84       	ldd	r11, Y+9	; 0x09
    3a3e:	c8 84       	ldd	r12, Y+8	; 0x08
    3a40:	df 80       	ldd	r13, Y+7	; 0x07
    3a42:	ee 80       	ldd	r14, Y+6	; 0x06
    3a44:	fd 80       	ldd	r15, Y+5	; 0x05
    3a46:	0c 81       	ldd	r16, Y+4	; 0x04
    3a48:	1b 81       	ldd	r17, Y+3	; 0x03
    3a4a:	aa 81       	ldd	r26, Y+2	; 0x02
    3a4c:	b9 81       	ldd	r27, Y+1	; 0x01
    3a4e:	ce 0f       	add	r28, r30
    3a50:	d1 1d       	adc	r29, r1
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	f8 94       	cli
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	cd bf       	out	0x3d, r28	; 61
    3a5c:	ed 01       	movw	r28, r26
    3a5e:	08 95       	ret

00003a60 <_exit>:
    3a60:	f8 94       	cli

00003a62 <__stop_program>:
    3a62:	ff cf       	rjmp	.-2      	; 0x3a62 <__stop_program>
